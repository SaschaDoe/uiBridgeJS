{
  "version": 3,
  "sources": ["../src/index.js", "../src/core/CommandRegistry.js", "../src/core/SelectorEngine.js", "../src/discovery/CDIGenerator.js", "../src/commands/click.js", "../src/commands/screenshot.js", "../src/commands/help.js", "../src/core/UIBridge.js"],
  "sourcesContent": ["/**\r\n * UIBridge - In-app automation framework for web applications\r\n * Version: 1.0.0\r\n */\r\n\r\n// Core exports\r\nexport { UIBridge } from './core/UIBridge.js';\r\nexport { CommandRegistry } from './core/CommandRegistry.js';\r\nexport { SelectorEngine } from './core/SelectorEngine.js';\r\n\r\n// Command exports\r\nexport { clickCommand } from './commands/click.js';\r\nexport { screenshotCommand } from './commands/screenshot.js';\r\n\r\n// Discovery exports\r\nexport { CDIGenerator } from './discovery/CDIGenerator.js';\r\n\r\n// Default instance for immediate use\r\nimport { UIBridge } from './core/UIBridge.js';\r\n\r\n/**\r\n * Create a new UIBridge instance with default configuration\r\n * @param {Object} config - Configuration options\r\n * @returns {UIBridge} UIBridge instance\r\n */\r\nexport function createUIBridge(config = {}) {\r\n  return new UIBridge({\r\n    debug: true,\r\n    generateCDI: true,\r\n    enableHttpDiscovery: true,\r\n    ...config\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize UIBridge with default settings (for quick setup)\r\n * @param {Object} config - Configuration options\r\n * @returns {Promise<UIBridge>} Initialized UIBridge instance\r\n */\r\nexport async function initUIBridge(config = {}) {\r\n  const bridge = createUIBridge(config);\r\n  await bridge.init();\r\n  return bridge;\r\n}\r\n\r\n// Auto-initialize default instance if in browser environment\r\n// Only do this if we're not in SSR and window is available\r\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\r\n  // Check if UIBridge is already initialized\r\n  if (!window.uibridge) {\r\n    const defaultInstance = createUIBridge({\r\n      debug: false,\r\n      generateCDI: false,\r\n      autoInit: true\r\n    });\r\n    \r\n    // Expose on window for global access\r\n    window.uibridge = defaultInstance;\r\n    \r\n    // Also expose the class for manual instantiation\r\n    window.UIBridge = UIBridge;\r\n    \r\n    // Development helpers\r\n    if (process?.env?.NODE_ENV === 'development' || window.location?.hostname === 'localhost') {\r\n      window.createUIBridge = createUIBridge;\r\n      window.initUIBridge = initUIBridge;\r\n    }\r\n  }\r\n}\r\n\r\n// Version information\r\nexport const version = '1.0.0';\r\nexport const name = 'UIBridge';\r\n\r\n// Default export for convenience\r\nexport default UIBridge; ", "/**\r\n * CommandRegistry - Manages command registration and retrieval\r\n */\r\nexport class CommandRegistry {\r\n  constructor() {\r\n    this.commands = new Map();\r\n  }\r\n\r\n  /**\r\n   * Register a new command\r\n   * @param {string} name - Command name\r\n   * @param {Object} command - Command implementation\r\n   */\r\n  register(name, command) {\r\n    if (!name || typeof name !== 'string') {\r\n      throw new Error('Command name must be a non-empty string');\r\n    }\r\n\r\n    if (!command || typeof command.execute !== 'function') {\r\n      throw new Error('Command must have an execute function');\r\n    }\r\n\r\n    // Validate command structure\r\n    const requiredFields = ['name', 'description', 'parameters'];\r\n    for (const field of requiredFields) {\r\n      if (!command[field]) {\r\n        throw new Error(`Command must have a ${field} property`);\r\n      }\r\n    }\r\n\r\n    this.commands.set(name, {\r\n      ...command,\r\n      registeredAt: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a command by name\r\n   * @param {string} name - Command name\r\n   * @returns {Object|null} Command or null if not found\r\n   */\r\n  get(name) {\r\n    return this.commands.get(name) || null;\r\n  }\r\n\r\n  /**\r\n   * Get all registered commands\r\n   * @returns {Array} Array of all commands\r\n   */\r\n  getAll() {\r\n    return Array.from(this.commands.values());\r\n  }\r\n\r\n  /**\r\n   * Check if a command exists\r\n   * @param {string} name - Command name\r\n   * @returns {boolean} True if command exists\r\n   */\r\n  has(name) {\r\n    return this.commands.has(name);\r\n  }\r\n\r\n  /**\r\n   * Unregister a command\r\n   * @param {string} name - Command name\r\n   * @returns {boolean} True if command was removed\r\n   */\r\n  unregister(name) {\r\n    return this.commands.delete(name);\r\n  }\r\n\r\n  /**\r\n   * Get command names\r\n   * @returns {Array<string>} Array of command names\r\n   */\r\n  getNames() {\r\n    return Array.from(this.commands.keys());\r\n  }\r\n\r\n  /**\r\n   * Clear all commands\r\n   */\r\n  clear() {\r\n    this.commands.clear();\r\n  }\r\n\r\n  /**\r\n   * Get commands count\r\n   * @returns {number} Number of registered commands\r\n   */\r\n  size() {\r\n    return this.commands.size;\r\n  }\r\n} ", "/**\r\n * SelectorEngine - Handles different selector strategies for finding DOM elements\r\n */\r\nexport class SelectorEngine {\r\n  constructor() {\r\n    this.strategies = new Map();\r\n    this._setupDefaultStrategies();\r\n  }\r\n\r\n  /**\r\n   * Setup default selector strategies\r\n   * @private\r\n   */\r\n  _setupDefaultStrategies() {\r\n    // CSS Selector\r\n    this.strategies.set('css', (selector) => {\r\n      return document.querySelector(selector);\r\n    });\r\n\r\n    // CSS Selector for multiple elements\r\n    this.strategies.set('cssAll', (selector) => {\r\n      return Array.from(document.querySelectorAll(selector));\r\n    });\r\n\r\n    // XPath\r\n    this.strategies.set('xpath', (xpath) => {\r\n      const result = document.evaluate(\r\n        xpath,\r\n        document,\r\n        null,\r\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\r\n        null\r\n      );\r\n      return result.singleNodeValue;\r\n    });\r\n\r\n    // XPath for multiple elements\r\n    this.strategies.set('xpathAll', (xpath) => {\r\n      const result = document.evaluate(\r\n        xpath,\r\n        document,\r\n        null,\r\n        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\r\n        null\r\n      );\r\n      const nodes = [];\r\n      for (let i = 0; i < result.snapshotLength; i++) {\r\n        nodes.push(result.snapshotItem(i));\r\n      }\r\n      return nodes;\r\n    });\r\n\r\n    // Text content\r\n    this.strategies.set('text', (text) => {\r\n      const walker = document.createTreeWalker(\r\n        document.body,\r\n        NodeFilter.SHOW_TEXT,\r\n        null,\r\n        false\r\n      );\r\n      \r\n      let node;\r\n      while (node = walker.nextNode()) {\r\n        if (node.textContent.trim() === text) {\r\n          return node.parentElement;\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Partial text content\r\n    this.strategies.set('partialText', (text) => {\r\n      const walker = document.createTreeWalker(\r\n        document.body,\r\n        NodeFilter.SHOW_TEXT,\r\n        null,\r\n        false\r\n      );\r\n      \r\n      let node;\r\n      while (node = walker.nextNode()) {\r\n        if (node.textContent.trim().includes(text)) {\r\n          return node.parentElement;\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Data-testid\r\n    this.strategies.set('testId', (id) => {\r\n      return document.querySelector(`[data-testid=\"${id}\"]`);\r\n    });\r\n\r\n    // Data-test attribute\r\n    this.strategies.set('dataTest', (id) => {\r\n      return document.querySelector(`[data-test=\"${id}\"]`);\r\n    });\r\n\r\n    // Label (for form inputs)\r\n    this.strategies.set('label', (labelText) => {\r\n      const labels = document.querySelectorAll('label');\r\n      for (const label of labels) {\r\n        if (label.textContent.trim() === labelText) {\r\n          const forAttr = label.getAttribute('for');\r\n          if (forAttr) {\r\n            return document.getElementById(forAttr);\r\n          }\r\n          // Check for nested input\r\n          const input = label.querySelector('input, select, textarea');\r\n          if (input) {\r\n            return input;\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Placeholder\r\n    this.strategies.set('placeholder', (placeholder) => {\r\n      return document.querySelector(`[placeholder=\"${placeholder}\"]`);\r\n    });\r\n\r\n    // Aria-label\r\n    this.strategies.set('ariaLabel', (label) => {\r\n      return document.querySelector(`[aria-label=\"${label}\"]`);\r\n    });\r\n\r\n    // Role\r\n    this.strategies.set('role', (role) => {\r\n      return document.querySelector(`[role=\"${role}\"]`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Find a single element\r\n   * @param {string|Object} selector - Selector configuration\r\n   * @returns {Element|null} Found element or null\r\n   */\r\n  find(selector) {\r\n    // String = CSS selector\r\n    if (typeof selector === 'string') {\r\n      return this.strategies.get('css')(selector);\r\n    }\r\n\r\n    // Object selectors\r\n    if (typeof selector === 'object' && selector !== null) {\r\n      const strategies = [\r\n        'xpath', 'text', 'partialText', 'testId', 'dataTest',\r\n        'label', 'placeholder', 'ariaLabel', 'role', 'css'\r\n      ];\r\n\r\n      for (const strategy of strategies) {\r\n        if (selector[strategy]) {\r\n          const strategyFn = this.strategies.get(strategy);\r\n          if (strategyFn) {\r\n            const element = strategyFn(selector[strategy]);\r\n            if (element) {\r\n              return element;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    throw new Error(`Invalid selector: ${JSON.stringify(selector)}`);\r\n  }\r\n\r\n  /**\r\n   * Find multiple elements\r\n   * @param {string|Object} selector - Selector configuration\r\n   * @returns {Array<Element>} Found elements\r\n   */\r\n  findAll(selector) {\r\n    // String = CSS selector\r\n    if (typeof selector === 'string') {\r\n      return this.strategies.get('cssAll')(selector);\r\n    }\r\n\r\n    // Object selectors\r\n    if (typeof selector === 'object' && selector !== null) {\r\n      if (selector.xpath) {\r\n        return this.strategies.get('xpathAll')(selector.xpath);\r\n      }\r\n      if (selector.css) {\r\n        return this.strategies.get('cssAll')(selector.css);\r\n      }\r\n      // For other strategies, find single and wrap in array\r\n      const element = this.find(selector);\r\n      return element ? [element] : [];\r\n    }\r\n\r\n    throw new Error(`Invalid selector: ${JSON.stringify(selector)}`);\r\n  }\r\n\r\n  /**\r\n   * Register a custom selector strategy\r\n   * @param {string} name - Strategy name\r\n   * @param {Function} strategy - Strategy function\r\n   */\r\n  registerStrategy(name, strategy) {\r\n    if (typeof strategy !== 'function') {\r\n      throw new Error('Strategy must be a function');\r\n    }\r\n    this.strategies.set(name, strategy);\r\n  }\r\n\r\n  /**\r\n   * Check if element is visible\r\n   * @param {Element} element - Element to check\r\n   * @returns {boolean} True if element is visible\r\n   */\r\n  isVisible(element) {\r\n    if (!element) return false;\r\n\r\n    const rect = element.getBoundingClientRect();\r\n    const style = window.getComputedStyle(element);\r\n    \r\n    return (\r\n      rect.width > 0 &&\r\n      rect.height > 0 &&\r\n      style.display !== 'none' &&\r\n      style.visibility !== 'hidden' &&\r\n      parseFloat(style.opacity) > 0 &&\r\n      rect.top < window.innerHeight &&\r\n      rect.bottom > 0 &&\r\n      rect.left < window.innerWidth &&\r\n      rect.right > 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get element information\r\n   * @param {Element} element - Element to analyze\r\n   * @returns {Object} Element information\r\n   */\r\n  getElementInfo(element) {\r\n    if (!element) return null;\r\n\r\n    const rect = element.getBoundingClientRect();\r\n    const style = window.getComputedStyle(element);\r\n\r\n    return {\r\n      tag: element.tagName.toLowerCase(),\r\n      id: element.id || null,\r\n      classes: Array.from(element.classList),\r\n      text: element.textContent?.trim().substring(0, 100) || '',\r\n      attributes: this._getElementAttributes(element),\r\n      position: {\r\n        x: rect.left,\r\n        y: rect.top,\r\n        width: rect.width,\r\n        height: rect.height\r\n      },\r\n      visible: this.isVisible(element),\r\n      focusable: this._isFocusable(element)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get element attributes\r\n   * @param {Element} element - Element to analyze\r\n   * @returns {Object} Element attributes\r\n   * @private\r\n   */\r\n  _getElementAttributes(element) {\r\n    const attrs = {};\r\n    for (const attr of element.attributes) {\r\n      attrs[attr.name] = attr.value;\r\n    }\r\n    return attrs;\r\n  }\r\n\r\n  /**\r\n   * Check if element is focusable\r\n   * @param {Element} element - Element to check\r\n   * @returns {boolean} True if element is focusable\r\n   * @private\r\n   */\r\n  _isFocusable(element) {\r\n    const focusableTags = ['input', 'select', 'textarea', 'button', 'a'];\r\n    return focusableTags.includes(element.tagName.toLowerCase()) ||\r\n           element.hasAttribute('tabindex') ||\r\n           element.hasAttribute('contenteditable');\r\n  }\r\n} ", "/**\r\n * CDIGenerator - Command Discovery Interface Generator\r\n * Generates documentation and discovery files for available commands\r\n */\r\nexport class CDIGenerator {\r\n  constructor(registry) {\r\n    this.registry = registry;\r\n    this.version = '1.0.0';\r\n  }\r\n\r\n  /**\r\n   * Generate markdown documentation\r\n   * @returns {string} Markdown documentation\r\n   */\r\n  generateMarkdown() {\r\n    const commands = this.registry.getAll();\r\n    const date = new Date().toISOString();\r\n    \r\n    let markdown = `# UIBridge Commands Documentation\\n\\n`;\r\n    markdown += `**Generated:** ${date}  \\n`;\r\n    markdown += `**Version:** ${this.version}  \\n`;\r\n    markdown += `**Total Commands:** ${commands.length}\\n\\n`;\r\n    \r\n    // Summary table\r\n    markdown += `## Command Summary\\n\\n`;\r\n    markdown += `| Command | Description | Parameters |\\n`;\r\n    markdown += `|---------|-------------|------------|\\n`;\r\n    \r\n    commands.forEach(cmd => {\r\n      const params = cmd.parameters.map(p => \r\n        `${p.name}${p.required ? '' : '?'}`\r\n      ).join(', ');\r\n      markdown += `| **${cmd.name}** | ${cmd.description} | ${params || 'None'} |\\n`;\r\n    });\r\n    \r\n    // Detailed documentation\r\n    markdown += `\\n## Command Details\\n\\n`;\r\n    \r\n    commands.forEach(cmd => {\r\n      markdown += `### ${cmd.name}\\n\\n`;\r\n      markdown += `${cmd.description}\\n\\n`;\r\n      \r\n      if (cmd.parameters.length > 0) {\r\n        markdown += `**Parameters:**\\n\\n`;\r\n        cmd.parameters.forEach(param => {\r\n          const required = param.required ? '**required**' : '*optional*';\r\n          markdown += `- \\`${param.name}\\` (${param.type}) - ${required}  \\n`;\r\n          markdown += `  ${param.description}\\n`;\r\n        });\r\n        markdown += '\\n';\r\n      }\r\n      \r\n      if (cmd.examples && cmd.examples.length > 0) {\r\n        markdown += `**Examples:**\\n\\n`;\r\n        cmd.examples.forEach(example => {\r\n          markdown += `\\`\\`\\`javascript\\n${example}\\n\\`\\`\\`\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      markdown += `---\\n\\n`;\r\n    });\r\n    \r\n    return markdown;\r\n  }\r\n\r\n  /**\r\n   * Generate JSON schema for commands\r\n   * @returns {Object} JSON schema\r\n   */\r\n  generateJSON() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    return {\r\n      version: this.version,\r\n      generated: new Date().toISOString(),\r\n      commands: commands.map(cmd => ({\r\n        name: cmd.name,\r\n        description: cmd.description,\r\n        parameters: cmd.parameters,\r\n        examples: cmd.examples || []\r\n      }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save documentation to file\r\n   * @param {string} format - Format (markdown, json)\r\n   */\r\n  async saveToFile(format = 'markdown') {\r\n    const content = format === 'json' \r\n      ? JSON.stringify(this.generateJSON(), null, 2)\r\n      : this.generateMarkdown();\r\n    \r\n    const blob = new Blob([content], { \r\n      type: format === 'json' ? 'application/json' : 'text/markdown' \r\n    });\r\n    \r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `uibridge-commands.${format === 'json' ? 'json' : 'md'}`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Generate TypeScript definitions\r\n   * @returns {string} TypeScript definitions\r\n   */\r\n  generateTypeScript() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    let ts = `// UIBridge Command Definitions\\n`;\r\n    ts += `// Generated: ${new Date().toISOString()}\\n\\n`;\r\n    \r\n    // Generate interface for each command's options\r\n    commands.forEach(cmd => {\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      if (optionalParams.length > 0) {\r\n        ts += `interface ${this._capitalize(cmd.name)}Options {\\n`;\r\n        optionalParams.forEach(param => {\r\n          ts += `  ${param.name}?: ${this._mapTypeToTS(param.type)}; // ${param.description}\\n`;\r\n        });\r\n        ts += `}\\n\\n`;\r\n      }\r\n    });\r\n    \r\n    // Generate main UIBridge interface\r\n    ts += `interface UIBridge {\\n`;\r\n    commands.forEach(cmd => {\r\n      const requiredParams = cmd.parameters.filter(p => p.required);\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      \r\n      let signature = `  ${cmd.name}(`;\r\n      \r\n      // Add required parameters\r\n      requiredParams.forEach((param, index) => {\r\n        if (index > 0) signature += ', ';\r\n        signature += `${param.name}: ${this._mapTypeToTS(param.type)}`;\r\n      });\r\n      \r\n      // Add optional parameters as options object\r\n      if (optionalParams.length > 0) {\r\n        if (requiredParams.length > 0) signature += ', ';\r\n        signature += `options?: ${this._capitalize(cmd.name)}Options`;\r\n      }\r\n      \r\n      signature += `): Promise<any>; // ${cmd.description}\\n`;\r\n      ts += signature;\r\n    });\r\n    ts += `}\\n\\n`;\r\n    \r\n    // Export types\r\n    ts += `export { UIBridge };\\n`;\r\n    commands.forEach(cmd => {\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      if (optionalParams.length > 0) {\r\n        ts += `export { ${this._capitalize(cmd.name)}Options };\\n`;\r\n      }\r\n    });\r\n    \r\n    return ts;\r\n  }\r\n\r\n  /**\r\n   * Generate OpenAPI specification\r\n   * @returns {Object} OpenAPI spec\r\n   */\r\n  generateOpenAPI() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    const spec = {\r\n      openapi: \"3.0.0\",\r\n      info: {\r\n        title: \"UIBridge API\",\r\n        description: \"In-app automation framework for web applications\",\r\n        version: this.version,\r\n        contact: {\r\n          name: \"UIBridge Team\"\r\n        }\r\n      },\r\n      servers: [\r\n        {\r\n          url: \"http://localhost:3000\",\r\n          description: \"Local development server\"\r\n        }\r\n      ],\r\n      paths: {},\r\n      components: {\r\n        schemas: {}\r\n      }\r\n    };\r\n    \r\n    // Generate paths for each command\r\n    commands.forEach(cmd => {\r\n      const path = `/commands/${cmd.name}`;\r\n      spec.paths[path] = {\r\n        post: {\r\n          summary: cmd.description,\r\n          description: cmd.description,\r\n          requestBody: {\r\n            required: true,\r\n            content: {\r\n              \"application/json\": {\r\n                schema: {\r\n                  type: \"object\",\r\n                  properties: this._generateJSONSchema(cmd.parameters),\r\n                  required: cmd.parameters.filter(p => p.required).map(p => p.name)\r\n                }\r\n              }\r\n            }\r\n          },\r\n          responses: {\r\n            \"200\": {\r\n              description: \"Command executed successfully\",\r\n              content: {\r\n                \"application/json\": {\r\n                  schema: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      success: { type: \"boolean\" },\r\n                      result: { type: \"object\" },\r\n                      timestamp: { type: \"string\", format: \"date-time\" }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"400\": {\r\n              description: \"Invalid parameters\"\r\n            },\r\n            \"500\": {\r\n              description: \"Command execution failed\"\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n    \r\n    return spec;\r\n  }\r\n\r\n  /**\r\n   * Get live command statistics\r\n   * @returns {Object} Command statistics\r\n   */\r\n  getStatistics() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    return {\r\n      totalCommands: commands.length,\r\n      commandNames: commands.map(c => c.name),\r\n      totalParameters: commands.reduce((sum, cmd) => sum + cmd.parameters.length, 0),\r\n      requiredParameters: commands.reduce((sum, cmd) => \r\n        sum + cmd.parameters.filter(p => p.required).length, 0),\r\n      optionalParameters: commands.reduce((sum, cmd) => \r\n        sum + cmd.parameters.filter(p => !p.required).length, 0),\r\n      commandsWithExamples: commands.filter(cmd => cmd.examples && cmd.examples.length > 0).length,\r\n      averageParametersPerCommand: Math.round(\r\n        commands.reduce((sum, cmd) => sum + cmd.parameters.length, 0) / commands.length * 100\r\n      ) / 100,\r\n      lastGenerated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper: Capitalize string\r\n   * @param {string} str - String to capitalize\r\n   * @returns {string} Capitalized string\r\n   * @private\r\n   */\r\n  _capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  /**\r\n   * Helper: Map parameter type to TypeScript type\r\n   * @param {string} type - Parameter type\r\n   * @returns {string} TypeScript type\r\n   * @private\r\n   */\r\n  _mapTypeToTS(type) {\r\n    const typeMap = {\r\n      'string': 'string',\r\n      'number': 'number',\r\n      'boolean': 'boolean',\r\n      'object': 'object',\r\n      'array': 'any[]',\r\n      'Selector': 'string | object',\r\n      'ClickOptions': 'object',\r\n      'ScreenshotOptions': 'object'\r\n    };\r\n    \r\n    return typeMap[type] || 'any';\r\n  }\r\n\r\n  /**\r\n   * Helper: Generate JSON schema for parameters\r\n   * @param {Array} parameters - Command parameters\r\n   * @returns {Object} JSON schema properties\r\n   * @private\r\n   */\r\n  _generateJSONSchema(parameters) {\r\n    const properties = {};\r\n    \r\n    parameters.forEach(param => {\r\n      properties[param.name] = {\r\n        type: this._mapTypeToJSONSchema(param.type),\r\n        description: param.description\r\n      };\r\n      \r\n      if (param.default !== undefined) {\r\n        properties[param.name].default = param.default;\r\n      }\r\n    });\r\n    \r\n    return properties;\r\n  }\r\n\r\n  /**\r\n   * Helper: Map parameter type to JSON Schema type\r\n   * @param {string} type - Parameter type\r\n   * @returns {string} JSON Schema type\r\n   * @private\r\n   */\r\n  _mapTypeToJSONSchema(type) {\r\n    const typeMap = {\r\n      'string': 'string',\r\n      'number': 'number',\r\n      'boolean': 'boolean',\r\n      'object': 'object',\r\n      'array': 'array',\r\n      'Selector': 'string', // Simplified for JSON schema\r\n      'ClickOptions': 'object',\r\n      'ScreenshotOptions': 'object'\r\n    };\r\n    \r\n    return typeMap[type] || 'string';\r\n  }\r\n} ", "/**\n * Click Command - Synthetic click interactions\n */\nexport const clickCommand = {\n  name: 'click',\n  description: 'Clicks on an element using synthetic mouse events',\n  examples: [\n    \"execute('click', '#submit-button')\",\n    \"execute('click', { text: 'Submit' })\",\n    \"execute('click', { testId: 'login-btn' })\",\n    \"execute('click', '#button', { position: 'center', clickCount: 2 })\"\n  ],\n  parameters: [\n    {\n      name: 'selector',\n      type: 'Selector',\n      required: true,\n      description: 'Element to click (string, CSS selector, or selector object)'\n    },\n    {\n      name: 'options',\n      type: 'ClickOptions',\n      required: false,\n      description: 'Click options: { force?, position?, button?, clickCount?, delay? }'\n    }\n  ],\n\n  async execute(bridge, selector, options = {}) {\n    const element = bridge.findElement(selector);\n    if (!element) {\n      throw new Error(`Element not found: ${JSON.stringify(selector)}`);\n    }\n\n    // Default options\n    const opts = {\n      force: false,\n      position: 'center', // center, topLeft, topRight, bottomLeft, bottomRight\n      button: 'left',     // left, right, middle\n      clickCount: 1,\n      delay: 0,\n      scrollIntoView: true,\n      ...options\n    };\n\n    // Log the action\n    bridge._log(`Clicking element: ${bridge.selectorEngine.getElementInfo(element)?.tag || 'unknown'}`);\n\n    // Scroll element into view if requested\n    if (opts.scrollIntoView) {\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      // Small delay to allow scroll to complete\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    // Check visibility unless force is true\n    if (!opts.force) {\n      const isVisible = bridge.selectorEngine.isVisible(element);\n      if (!isVisible) {\n        throw new Error('Element is not visible. Use { force: true } to click anyway.');\n      }\n    }\n\n    // Check if element is actionable (not covered by another element)\n    if (!opts.force) {\n      const isActionable = this._isElementActionable(element);\n      if (!isActionable) {\n        throw new Error('Element is covered by another element. Use { force: true } to click anyway.');\n      }\n    }\n\n    // Calculate click position\n    const rect = element.getBoundingClientRect();\n    const position = this._calculatePosition(rect, opts.position);\n\n    // Create synthetic mouse events\n    const eventInit = {\n      bubbles: true,\n      cancelable: true,\n      view: window,\n      clientX: position.x,\n      clientY: position.y,\n      button: this._getButtonCode(opts.button),\n      buttons: this._getButtonsCode(opts.button),\n      detail: opts.clickCount\n    };\n\n    // Dispatch mouse events sequence\n    try {\n      // Hover first\n      element.dispatchEvent(new MouseEvent('mouseover', eventInit));\n      element.dispatchEvent(new MouseEvent('mouseenter', eventInit));\n\n      // Mouse down\n      element.dispatchEvent(new MouseEvent('mousedown', eventInit));\n      \n      // Optional delay between mousedown and mouseup\n      if (opts.delay > 0) {\n        await new Promise(resolve => setTimeout(resolve, opts.delay));\n      }\n      \n      // Mouse up\n      element.dispatchEvent(new MouseEvent('mouseup', eventInit));\n      \n      // Click event(s)\n      for (let i = 0; i < opts.clickCount; i++) {\n        if (i > 0) {\n          await new Promise(resolve => setTimeout(resolve, 50)); // Small delay between multiple clicks\n        }\n        element.dispatchEvent(new MouseEvent('click', {\n          ...eventInit,\n          detail: i + 1\n        }));\n      }\n\n      // Focus element if it's focusable\n      if (bridge.selectorEngine._isFocusable(element)) {\n        element.focus();\n      }\n\n      // Special handling for different element types\n      await this._handleSpecialElements(element, opts);\n\n    } catch (error) {\n      throw new Error(`Failed to click element: ${error.message}`);\n    }\n\n    return {\n      success: true,\n      element: bridge.selectorEngine.getElementInfo(element),\n      position: position,\n      timestamp: new Date().toISOString()\n    };\n  },\n\n  /**\n   * Check if element is actionable (not covered by another element)\n   * @param {Element} element - Element to check\n   * @returns {boolean} True if element is actionable\n   * @private\n   */\n  _isElementActionable(element) {\n    const rect = element.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    \n    const elementAtPoint = document.elementFromPoint(centerX, centerY);\n    \n    // Check if the element at the point is the same element or a descendant\n    return element === elementAtPoint || element.contains(elementAtPoint);\n  },\n\n  /**\n   * Calculate click position based on position option\n   * @param {DOMRect} rect - Element bounding rectangle\n   * @param {string} position - Position option\n   * @returns {Object} Coordinates {x, y}\n   * @private\n   */\n  _calculatePosition(rect, position) {\n    const positions = {\n      center: { \n        x: rect.left + rect.width / 2, \n        y: rect.top + rect.height / 2 \n      },\n      topLeft: { \n        x: rect.left + 1, \n        y: rect.top + 1 \n      },\n      topRight: { \n        x: rect.right - 1, \n        y: rect.top + 1 \n      },\n      bottomLeft: { \n        x: rect.left + 1, \n        y: rect.bottom - 1 \n      },\n      bottomRight: { \n        x: rect.right - 1, \n        y: rect.bottom - 1 \n      },\n      topCenter: {\n        x: rect.left + rect.width / 2,\n        y: rect.top + 1\n      },\n      bottomCenter: {\n        x: rect.left + rect.width / 2,\n        y: rect.bottom - 1\n      },\n      leftCenter: {\n        x: rect.left + 1,\n        y: rect.top + rect.height / 2\n      },\n      rightCenter: {\n        x: rect.right - 1,\n        y: rect.top + rect.height / 2\n      }\n    };\n    \n    return positions[position] || positions.center;\n  },\n\n  /**\n   * Get mouse button code\n   * @param {string} button - Button name\n   * @returns {number} Button code\n   * @private\n   */\n  _getButtonCode(button) {\n    const buttons = {\n      left: 0,\n      middle: 1,\n      right: 2\n    };\n    return buttons[button] || 0;\n  },\n\n  /**\n   * Get mouse buttons bitmask\n   * @param {string} button - Button name\n   * @returns {number} Buttons bitmask\n   * @private\n   */\n  _getButtonsCode(button) {\n    const buttons = {\n      left: 1,\n      middle: 4,\n      right: 2\n    };\n    return buttons[button] || 1;\n  },\n\n  /**\n   * Handle special element types (forms, checkboxes, etc.)\n   * @param {Element} element - Element that was clicked\n   * @param {Object} opts - Click options\n   * @private\n   */\n  async _handleSpecialElements(element, opts) {\n    const tagName = element.tagName.toLowerCase();\n    const inputType = element.type?.toLowerCase();\n\n    // Handle form submission\n    if (tagName === 'button' && element.type === 'submit') {\n      const form = element.closest('form');\n      if (form) {\n        // Let the natural form submission happen\n        return;\n      }\n    }\n\n    // Handle checkbox/radio button state\n    if (tagName === 'input' && (inputType === 'checkbox' || inputType === 'radio')) {\n      // The native click event should handle the state change\n      return;\n    }\n\n    // Handle select elements\n    if (tagName === 'select') {\n      // Dispatch change event after click\n      setTimeout(() => {\n        element.dispatchEvent(new Event('change', { bubbles: true }));\n      }, 10);\n    }\n\n    // Handle links\n    if (tagName === 'a' && element.href) {\n      // Let natural navigation happen, but can be intercepted if needed\n      return;\n    }\n  }\n}; ", "/**\n * Screenshot Command - Capture page or element screenshots\n */\nexport const screenshotCommand = {\n  name: 'screenshot',\n  description: 'Takes a screenshot of the page or a specific element',\n  examples: [\n    \"execute('screenshot')\",\n    \"execute('screenshot', { format: 'png', quality: 0.9 })\",\n    \"execute('screenshot', { selector: '#main-content' })\",\n    \"execute('screenshot', { fullPage: true, saveConfig: { autoSave: true, folder: 'tests' } })\"\n  ],\n  parameters: [\n    {\n      name: 'options',\n      type: 'ScreenshotOptions',\n      required: false,\n      description: 'Screenshot options: { selector?, format?, quality?, fullPage?, saveConfig? }'\n    }\n  ],\n\n  async execute(bridge, options = {}) {\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Starting screenshot command execution');\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Raw options received:', JSON.stringify(options, null, 2));\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Bridge config:', JSON.stringify(bridge.config.defaultScreenshotConfig, null, 2));\n    \n    const opts = {\n      selector: null,\n      format: 'png',         // png, jpeg, webp\n      quality: 0.92,         // 0-1 for jpeg/webp\n      fullPage: false,       // capture entire page\n      excludeSelectors: [],  // elements to hide during capture\n      backgroundColor: null, // background color override\n      scale: window.devicePixelRatio || 1,\n      \n      // Enhanced save configuration\n      saveConfig: {\n        // Use bridge default config as base\n        ...bridge.config.defaultScreenshotConfig,\n        // Override with user options\n        ...options.saveConfig\n      },\n      \n      ...options\n    };\n\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Final processed options:', JSON.stringify(opts, null, 2));\n    \n    // Log the action\n    bridge._log(`Taking screenshot with options:`, opts);\n\n    let targetElement = document.body;\n    \n    // Find specific element if selector provided\n    if (opts.selector) {\n      targetElement = bridge.findElement(opts.selector);\n      if (!targetElement) {\n        throw new Error(`Element not found for screenshot: ${JSON.stringify(opts.selector)}`);\n      }\n    }\n\n    try {\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Target element:', targetElement?.tagName, targetElement?.id, targetElement?.className);\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Target element dimensions:', {\n        width: targetElement?.offsetWidth,\n        height: targetElement?.offsetHeight,\n        scrollWidth: targetElement?.scrollWidth,\n        scrollHeight: targetElement?.scrollHeight\n      });\n      \n      // Load html2canvas library if not already loaded\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Loading html2canvas...');\n      try {\n        await this._ensureHtml2Canvas();\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas loaded:', !!window.html2canvas);\n      } catch (loadError) {\n        console.error('\uD83D\uDDBC\uFE0F [SCREENSHOT] Failed to load html2canvas:', loadError.message);\n        throw new Error(`Failed to load html2canvas library: ${loadError.message}. Please ensure you have internet connectivity or consider using a different screenshot method.`);\n      }\n      \n      // Temporarily hide excluded elements\n      const hiddenElements = this._hideElements(opts.excludeSelectors);\n      \n      // Prepare capture options\n      const html2canvasOptions = {\n        useCORS: true,\n        allowTaint: false,\n        backgroundColor: opts.backgroundColor,\n        scale: opts.scale,\n        logging: true, // Force logging for debugging\n        width: opts.fullPage ? document.documentElement.scrollWidth : undefined,\n        height: opts.fullPage ? document.documentElement.scrollHeight : undefined,\n        windowWidth: opts.fullPage ? document.documentElement.scrollWidth : undefined,\n        windowHeight: opts.fullPage ? document.documentElement.scrollHeight : undefined,\n        x: opts.fullPage ? 0 : undefined,\n        y: opts.fullPage ? 0 : undefined,\n        // Improve image quality\n        foreignObjectRendering: true,\n        imageTimeout: 15000,\n        removeContainer: true\n      };\n\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas options:', JSON.stringify(html2canvasOptions, null, 2));\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Starting html2canvas capture...');\n      \n      // Capture the screenshot with timeout\n      const canvas = await Promise.race([\n        window.html2canvas(targetElement, html2canvasOptions),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Screenshot capture timed out after 30 seconds')), 30000)\n        )\n      ]);\n      \n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Canvas created:', {\n        width: canvas.width,\n        height: canvas.height,\n        hasData: canvas.getContext('2d').getImageData(0, 0, 1, 1).data.some(x => x !== 0)\n      });\n      \n      // Restore hidden elements\n      this._restoreElements(hiddenElements);\n\n      // Convert to desired format\n      const mimeType = `image/${opts.format}`;\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Converting to format:', mimeType, 'quality:', opts.quality);\n      const dataUrl = canvas.toDataURL(mimeType, opts.quality);\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] DataURL created, length:', dataUrl.length, 'starts with:', dataUrl.substring(0, 50));\n      \n      // Generate filename based on configuration\n      const fileName = this._generateFileName(opts);\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Generated filename:', fileName);\n      \n      // Auto-save if configured\n      if (opts.saveConfig.autoSave) {\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Auto-save enabled, saving...');\n        await this._saveScreenshot(dataUrl, fileName, opts.saveConfig);\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Save completed');\n      } else {\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Auto-save disabled');\n      }\n\n      const result = {\n        success: true,\n        dataUrl,\n        width: canvas.width,\n        height: canvas.height,\n        format: opts.format,\n        fileName,\n        filePath: opts.saveConfig.folder ? `${opts.saveConfig.folder}/${fileName}` : fileName,\n        size: Math.round(dataUrl.length * 0.75), // Approximate file size in bytes\n        timestamp: new Date().toISOString(),\n        saveConfig: opts.saveConfig\n      };\n\n      // Add element info if specific element was captured\n      if (opts.selector) {\n        result.element = bridge.selectorEngine.getElementInfo(targetElement);\n        \n        // Add element info to metadata if requested\n        if (opts.saveConfig.includeMetadata) {\n          result.metadata = {\n            selector: opts.selector,\n            element: result.element,\n            viewport: {\n              width: window.innerWidth,\n              height: window.innerHeight\n            },\n            userAgent: navigator.userAgent,\n            timestamp: result.timestamp\n          };\n        }\n      }\n\n      bridge._log(`Screenshot captured: ${result.width}x${result.height}, ${result.size} bytes, saved as: ${result.filePath}`);\n      \n      return result;\n\n    } catch (error) {\n      throw new Error(`Failed to take screenshot: ${error.message}`);\n    }\n  },\n\n  /**\n   * Generate filename based on configuration\n   * @param {Object} opts - Screenshot options\n   * @returns {string} Generated filename\n   * @private\n   */\n  _generateFileName(opts) {\n    const config = opts.saveConfig;\n    \n    // Use custom name if provided\n    if (config.customName) {\n      return this._ensureExtension(config.customName, opts.format);\n    }\n    \n    let fileName = config.prefix || 'screenshot';\n    \n    // Add metadata to filename if requested\n    if (config.includeMetadata) {\n      if (opts.selector) {\n        const selectorStr = typeof opts.selector === 'string' \n          ? opts.selector.replace(/[#.]/g, '').substring(0, 20)\n          : 'element';\n        fileName += `_${selectorStr}`;\n      }\n      \n      if (opts.fullPage) {\n        fileName += '_fullpage';\n      }\n      \n      fileName += `_${opts.width || 'auto'}x${opts.height || 'auto'}`;\n    }\n    \n    // Add timestamp if requested\n    if (config.timestamp) {\n      const timestamp = new Date().toISOString()\n        .replace(/[:.]/g, '-')\n        .replace('T', '_')\n        .substring(0, 19);\n      fileName += `_${timestamp}`;\n    }\n    \n    return this._ensureExtension(fileName, opts.format);\n  },\n\n  /**\n   * Ensure filename has correct extension\n   * @param {string} fileName - Base filename\n   * @param {string} format - Image format\n   * @returns {string} Filename with extension\n   * @private\n   */\n  _ensureExtension(fileName, format) {\n    const extension = format === 'jpeg' ? 'jpg' : format;\n    if (!fileName.toLowerCase().endsWith(`.${extension}`)) {\n      return `${fileName}.${extension}`;\n    }\n    return fileName;\n  },\n\n  /**\n   * Save screenshot using available methods\n   * @param {string} dataUrl - Image data URL\n   * @param {string} fileName - File name\n   * @param {Object} saveConfig - Save configuration\n   * @private\n   */\n  async _saveScreenshot(dataUrl, fileName, saveConfig) {\n    try {\n      // Browser download method\n      await this._downloadImage(dataUrl, fileName);\n      \n      // Additional save methods can be added here:\n      // - IndexedDB storage for browser persistence\n      // - Server-side upload if endpoint is configured\n      // - File system API if available and user grants permission\n      \n      // Server-side save (if endpoint configured)\n      if (saveConfig.serverEndpoint) {\n        await this._saveToServer(dataUrl, fileName, saveConfig);\n      }\n      \n      // IndexedDB save (for browser persistence)\n      if (saveConfig.persistInBrowser) {\n        await this._saveToIndexedDB(dataUrl, fileName, saveConfig);\n      }\n      \n    } catch (error) {\n      console.warn('Failed to save screenshot:', error);\n      throw new Error(`Screenshot save failed: ${error.message}`);\n    }\n  },\n\n  /**\n   * Save to server endpoint (if configured)\n   * @param {string} dataUrl - Image data URL\n   * @param {string} fileName - File name\n   * @param {Object} saveConfig - Save configuration\n   * @private\n   */\n  async _saveToServer(dataUrl, fileName, saveConfig) {\n    if (!saveConfig.serverEndpoint) return;\n    \n    try {\n      const response = await fetch(saveConfig.serverEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fileName,\n          folder: saveConfig.folder,\n          dataUrl,\n          timestamp: new Date().toISOString()\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Server save failed: ${response.status} ${response.statusText}`);\n      }\n      \n      console.log(`Screenshot saved to server: ${fileName}`);\n    } catch (error) {\n      console.error('Server save error:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Save to IndexedDB for browser persistence\n   * @param {string} dataUrl - Image data URL\n   * @param {string} fileName - File name\n   * @param {Object} saveConfig - Save configuration\n   * @private\n   */\n  async _saveToIndexedDB(dataUrl, fileName, saveConfig) {\n    return new Promise((resolve, reject) => {\n      const dbName = 'UIBridgeScreenshots';\n      const storeName = 'screenshots';\n      \n      const request = indexedDB.open(dbName, 1);\n      \n      request.onerror = () => reject(new Error('IndexedDB open failed'));\n      \n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n        if (!db.objectStoreNames.contains(storeName)) {\n          const store = db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });\n          store.createIndex('fileName', 'fileName', { unique: false });\n          store.createIndex('timestamp', 'timestamp', { unique: false });\n        }\n      };\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        const transaction = db.transaction([storeName], 'readwrite');\n        const store = transaction.objectStore(storeName);\n        \n        const screenshot = {\n          fileName,\n          folder: saveConfig.folder,\n          dataUrl,\n          timestamp: new Date().toISOString(),\n          size: Math.round(dataUrl.length * 0.75)\n        };\n        \n        const addRequest = store.add(screenshot);\n        \n        addRequest.onsuccess = () => {\n          console.log(`Screenshot saved to IndexedDB: ${fileName}`);\n          resolve();\n        };\n        \n        addRequest.onerror = () => {\n          reject(new Error('IndexedDB save failed'));\n        };\n      };\n    });\n  },\n\n  /**\n   * Ensure html2canvas library is loaded\n   * @private\n   */\n  async _ensureHtml2Canvas() {\n    if (window.html2canvas) return;\n    \n    return new Promise((resolve, reject) => {\n      // Multiple CDN sources for reliability\n      const cdnSources = [\n        'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js',\n        'https://unpkg.com/html2canvas@1.4.1/dist/html2canvas.min.js',\n        'https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js'\n      ];\n      \n      let currentIndex = 0;\n      \n      const tryLoadScript = () => {\n        if (currentIndex >= cdnSources.length) {\n          reject(new Error('Failed to load html2canvas from all CDN sources'));\n          return;\n        }\n        \n        const script = document.createElement('script');\n        script.src = cdnSources[currentIndex];\n        script.crossOrigin = 'anonymous';\n        \n        script.onload = () => {\n          // Add a small delay to ensure the library is fully initialized\n          setTimeout(() => {\n            if (window.html2canvas && typeof window.html2canvas === 'function') {\n              console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas loaded successfully from:', cdnSources[currentIndex]);\n              resolve();\n            } else {\n              console.warn('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas loaded but not functional, trying next source...');\n              currentIndex++;\n              tryLoadScript();\n            }\n          }, 100);\n        };\n        \n        script.onerror = () => {\n          console.warn('\uD83D\uDDBC\uFE0F [SCREENSHOT] Failed to load html2canvas from:', cdnSources[currentIndex]);\n          currentIndex++;\n          tryLoadScript();\n        };\n        \n        // Check if script with same src is already being loaded\n        const existingScript = document.querySelector(`script[src=\"${cdnSources[currentIndex]}\"]`);\n        if (existingScript) {\n          // Wait for existing script to load\n          if (window.html2canvas && typeof window.html2canvas === 'function') {\n            resolve();\n          } else {\n            existingScript.onload = script.onload;\n            existingScript.onerror = script.onerror;\n          }\n          return;\n        }\n        \n        document.head.appendChild(script);\n      };\n      \n      tryLoadScript();\n    });\n  },\n\n  /**\n   * Hide elements temporarily\n   * @param {Array<string>} selectors - CSS selectors to hide\n   * @returns {Array} Array of elements that were hidden\n   * @private\n   */\n  _hideElements(selectors) {\n    const hiddenElements = [];\n    \n    for (const selector of selectors) {\n      try {\n        const elements = document.querySelectorAll(selector);\n        for (const element of elements) {\n          const originalDisplay = element.style.display;\n          element.style.display = 'none';\n          hiddenElements.push({ element, originalDisplay });\n        }\n      } catch (error) {\n        console.warn(`Invalid selector for hiding: ${selector}`, error);\n      }\n    }\n    \n    return hiddenElements;\n  },\n\n  /**\n   * Restore previously hidden elements\n   * @param {Array} hiddenElements - Elements to restore\n   * @private\n   */\n  _restoreElements(hiddenElements) {\n    for (const { element, originalDisplay } of hiddenElements) {\n      element.style.display = originalDisplay;\n    }\n  },\n\n  /**\n   * Download the image\n   * @param {string} dataUrl - Image data URL\n   * @param {string} fileName - File name\n   * @private\n   */\n  _downloadImage(dataUrl, fileName) {\n    try {\n      const link = document.createElement('a');\n      link.download = fileName;\n      link.href = dataUrl;\n      \n      // Append to body, click, and remove\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.warn('Failed to auto-download screenshot:', error);\n    }\n  }\n}; ", "/**\r\n * Help Command - Get help information about UIBridge commands and usage\r\n * Designed to provide clear, actionable information for AI agents and developers\r\n */\r\nexport const helpCommand = {\r\n  name: 'help',\r\n  description: 'Get help information about UIBridge commands and usage patterns for AI automation',\r\n  examples: [\r\n    \"execute('help')\",\r\n    \"execute('help', 'click')\",\r\n    \"execute('help', 'screenshot')\",\r\n    \"execute('--help')\"\r\n  ],\r\n  parameters: [\r\n    {\r\n      name: 'commandName',\r\n      type: 'string',\r\n      required: false,\r\n      description: 'Specific command to get help for (optional)'\r\n    }\r\n  ],\r\n\r\n  async execute(bridge, commandName = null) {\r\n    return bridge.getHelp(commandName);\r\n  }\r\n}; ", "import { CommandRegistry } from './CommandRegistry.js';\nimport { SelectorEngine } from './SelectorEngine.js';\nimport { CDIGenerator } from '../discovery/CDIGenerator.js';\nimport { clickCommand } from '../commands/click.js';\nimport { screenshotCommand } from '../commands/screenshot.js';\nimport { helpCommand } from '../commands/help.js';\n\n/**\n * UIBridge - Main automation framework class\n */\nexport class UIBridge {\n  constructor(config = {}) {\n    this.config = {\n      debug: false,\n      allowedOrigins: ['*'],\n      commands: ['click', 'screenshot', 'help'],\n      generateCDI: true,\n      enableHttpDiscovery: false,\n      autoInit: true,\n      version: '1.2.6',\n      \n      // Screenshot save configuration\n      defaultScreenshotConfig: {\n        autoSave: false,\n        folder: 'uibridge-screenshots',\n        prefix: 'screenshot',\n        timestamp: true,\n        includeMetadata: false,\n        persistInBrowser: false,\n        serverEndpoint: null, // Optional server endpoint for saving\n        ...config.defaultScreenshotConfig\n      },\n      \n      ...config\n    };\n    \n    this.registry = new CommandRegistry();\n    this.selectorEngine = new SelectorEngine();\n    this.cdiGenerator = null;\n    this._isInitialized = false;\n    this._initStartTime = null;\n    this._commandHistory = [];\n    \n    // Auto-initialize if configured - only in browser environment\n    if (this.config.autoInit && typeof window !== 'undefined' && typeof document !== 'undefined') {\n      // Delay initialization to ensure DOM is ready\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => this.init());\n      } else {\n        setTimeout(() => this.init(), 0);\n      }\n    }\n  }\n\n  /**\n   * Initialize UIBridge\n   * @returns {Promise<void>}\n   */\n  async init() {\n    if (this._isInitialized) {\n      this._log('UIBridge already initialized');\n      return;\n    }\n    \n    this._initStartTime = typeof performance !== 'undefined' ? performance.now() : Date.now();\n    this._log('Initializing UIBridge...', this.config);\n    \n    try {\n      // Register core commands\n      await this._registerCoreCommands();\n      \n      // Setup CDI generator\n      this.cdiGenerator = new CDIGenerator(this.registry);\n      \n      // Setup discovery endpoints\n      this._setupDiscovery();\n      \n      // Expose global APIs\n      this._setupGlobalAPI();\n      \n      this._isInitialized = true;\n      const initTime = (typeof performance !== 'undefined' ? performance.now() : Date.now()) - this._initStartTime;\n      \n      this._log(`UIBridge initialized successfully in ${initTime.toFixed(2)}ms`, {\n        commands: this.registry.getNames(),\n        version: this.config.version\n      });\n      \n      // Generate CDI if configured\n      if (this.config.generateCDI) {\n        this._generateCDI();\n      }\n      \n      // Dispatch initialization event\n      this._dispatchEvent('uibridge:initialized', {\n        version: this.config.version,\n        commands: this.registry.getNames(),\n        initTime\n      });\n      \n    } catch (error) {\n      this._log('Failed to initialize UIBridge:', error);\n      throw new Error(`UIBridge initialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Execute a command\n   * @param {string} commandName - Name of the command to execute\n   * @param {...any} args - Command arguments\n   * @returns {Promise<any>} Command result\n   */\n  async execute(commandName, ...args) {\n    // Handle help requests\n    if (commandName === 'help' || commandName === '--help') {\n      return this.getHelp(args[0]);\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('UIBridge not initialized. Call init() first.');\n    }\n    \n    const command = this.registry.get(commandName);\n    if (!command) {\n      // Provide helpful error with available commands\n      const available = this.registry.getAll().map(cmd => cmd.name).join(', ');\n      throw new Error(`Unknown command: ${commandName}. Available commands: ${available}. Use 'help' for detailed information.`);\n    }\n    \n    const startTime = typeof performance !== 'undefined' ? performance.now() : Date.now();\n    const executionId = this._generateExecutionId();\n    \n    this._log(`Executing command: ${commandName}`, { args, executionId });\n    \n    try {\n      // Add to command history\n      const historyEntry = {\n        id: executionId,\n        command: commandName,\n        args,\n        startTime: new Date().toISOString(),\n        status: 'running'\n      };\n      this._commandHistory.push(historyEntry);\n      \n      // Execute the command\n      const result = await command.execute(this, ...args);\n      \n      // Update history\n      const endTime = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const duration = endTime - startTime;\n      \n      historyEntry.status = 'completed';\n      historyEntry.duration = duration;\n      historyEntry.result = result;\n      historyEntry.endTime = new Date().toISOString();\n      \n      this._log(`Command completed: ${commandName} (${duration.toFixed(2)}ms)`, result);\n      \n      // Dispatch command event\n      this._dispatchEvent('uibridge:command', {\n        command: commandName,\n        args,\n        result,\n        duration,\n        executionId\n      });\n      \n      // Add execution metadata\n      const enhancedResult = {\n        ...result,\n        command: commandName,\n        duration,\n        timestamp: new Date().toISOString()\n      };\n\n      // Add to history\n      this._addToHistory({\n        command: commandName,\n        args,\n        result: enhancedResult,\n        duration,\n        timestamp: new Date().toISOString(),\n        status: 'completed'\n      });\n      \n      return enhancedResult;\n      \n    } catch (error) {\n      const endTime = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const duration = endTime - startTime;\n      \n      // Update history with error\n      const historyEntry = this._commandHistory[this._commandHistory.length - 1];\n      if (historyEntry && historyEntry.id === executionId) {\n        historyEntry.status = 'failed';\n        historyEntry.error = error.message;\n        historyEntry.duration = duration;\n        historyEntry.endTime = new Date().toISOString();\n      }\n      \n      this._log(`Command failed: ${commandName} (${duration.toFixed(2)}ms)`, error);\n      \n      // Dispatch error event\n      this._dispatchEvent('uibridge:error', {\n        command: commandName,\n        args,\n        error: error.message,\n        duration,\n        executionId\n      });\n      \n      // Add error to history\n      this._addToHistory({\n        command: commandName,\n        args,\n        error: error.message,\n        duration,\n        timestamp: new Date().toISOString(),\n        status: 'failed'\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Find an element using the selector engine\n   * @param {string|Object} selector - Selector to find element\n   * @returns {Element|null} Found element\n   */\n  findElement(selector) {\n    return this.selectorEngine.find(selector);\n  }\n\n  /**\n   * Find multiple elements using the selector engine\n   * @param {string|Object} selector - Selector to find elements\n   * @returns {Array<Element>} Found elements\n   */\n  findElements(selector) {\n    return this.selectorEngine.findAll(selector);\n  }\n\n  /**\n   * Get command discovery information\n   * @returns {Array} Array of command information\n   */\n  discover() {\n    return this.registry.getAll().map(cmd => ({\n      name: cmd.name,\n      description: cmd.description,\n      parameters: cmd.parameters,\n      examples: cmd.examples || []\n    }));\n  }\n\n  /**\n   * Get command execution history\n   * @param {number} limit - Maximum number of entries to return\n   * @returns {Array} Command history\n   */\n  getHistory(limit = 50) {\n    return this._commandHistory.slice(-limit);\n  }\n\n  /**\n   * Clear command history\n   */\n  clearHistory() {\n    this._commandHistory = [];\n    this._log('Command history cleared');\n  }\n\n  /**\n   * Get UIBridge status and statistics\n   * @returns {Object} Status information\n   */\n  getStatus() {\n    return {\n      initialized: this._isInitialized,\n      version: this.config.version,\n      commands: this.registry.getNames(),\n      commandCount: this.registry.size(),\n      historyLength: this._commandHistory.length,\n      config: { ...this.config },\n      uptime: this._initStartTime ? (typeof performance !== 'undefined' ? performance.now() : Date.now()) - this._initStartTime : 0\n    };\n  }\n\n  /**\n   * Register a custom command\n   * @param {string} name - Command name\n   * @param {Object} command - Command implementation\n   */\n  registerCommand(name, command) {\n    this.registry.register(name, command);\n    this._log(`Custom command registered: ${name}`);\n    \n    // Update CDI if available\n    if (this.cdiGenerator) {\n      this._generateCDI();\n    }\n  }\n\n  /**\n   * Unregister a command\n   * @param {string} name - Command name\n   * @returns {boolean} True if command was removed\n   */\n  unregisterCommand(name) {\n    const removed = this.registry.unregister(name);\n    if (removed) {\n      this._log(`Command unregistered: ${name}`);\n      \n      // Update CDI if available\n      if (this.cdiGenerator) {\n        this._generateCDI();\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Configure default screenshot settings\n   * @param {Object} config - Screenshot configuration\n   */\n  configureScreenshots(config) {\n    this.config.defaultScreenshotConfig = {\n      ...this.config.defaultScreenshotConfig,\n      ...config\n    };\n    this._log('Screenshot configuration updated:', this.config.defaultScreenshotConfig);\n  }\n\n  /**\n   * Get current screenshot configuration\n   * @returns {Object} Screenshot configuration\n   */\n  getScreenshotConfig() {\n    return { ...this.config.defaultScreenshotConfig };\n  }\n\n  /**\n   * Register core commands\n   * @private\n   */\n  async _registerCoreCommands() {\n    const commands = [\n      { name: 'click', implementation: clickCommand },\n      { name: 'screenshot', implementation: screenshotCommand },\n      { name: 'help', implementation: helpCommand }\n    ];\n    \n    for (const { name, implementation } of commands) {\n      if (this.config.commands.includes(name)) {\n        this.registry.register(name, implementation);\n        this._log(`Registered core command: ${name}`);\n      }\n    }\n  }\n\n  /**\n   * Setup discovery endpoints\n   * @private\n   */\n  _setupDiscovery() {\n    if (this.config.enableHttpDiscovery) {\n      // Simulate HTTP endpoint for development\n      window.__uibridge_discovery__ = () => {\n        return this.discover();\n      };\n      \n      window.__uibridge_status__ = () => {\n        return this.getStatus();\n      };\n      \n      this._log('HTTP discovery endpoints enabled');\n    }\n  }\n\n  /**\n   * Setup global APIs\n   * @private\n   */\n  _setupGlobalAPI() {\n    // Main global API\n    window.UIBridge = UIBridge;\n    window.uibridge = this;\n    \n    // Legacy/convenience APIs\n    window.__uibridge__ = {\n      execute: this.execute.bind(this),\n      discover: this.discover.bind(this),\n      findElement: this.findElement.bind(this),\n      findElements: this.findElements.bind(this),\n      getStatus: this.getStatus.bind(this),\n      getHistory: this.getHistory.bind(this)\n    };\n    \n    this._log('Global APIs exposed');\n  }\n\n  /**\n   * Generate and optionally display CDI\n   * @private\n   */\n  _generateCDI() {\n    if (!this.cdiGenerator) return;\n    \n    try {\n      if (this.config.debug) {\n        console.log('=== UIBridge Command Discovery Interface ===');\n        console.log(this.cdiGenerator.generateMarkdown());\n        console.log('=== End CDI ===');\n      }\n      \n      // Expose CDI methods globally for development\n      window.__uibridge_cdi__ = {\n        markdown: () => this.cdiGenerator.generateMarkdown(),\n        json: () => this.cdiGenerator.generateJSON(),\n        save: (format) => this.cdiGenerator.saveToFile(format)\n      };\n      \n    } catch (error) {\n      this._log('Failed to generate CDI:', error);\n    }\n  }\n\n  /**\n   * Generate unique execution ID\n   * @returns {string} Execution ID\n   * @private\n   */\n  _generateExecutionId() {\n    return `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Dispatch custom event\n   * @param {string} eventName - Event name\n   * @param {Object} detail - Event details\n   * @private\n   */\n  _dispatchEvent(eventName, detail) {\n    if (typeof window !== 'undefined' && window.dispatchEvent) {\n      const event = new CustomEvent(eventName, { detail });\n      window.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Log message with debug configuration\n   * @param {...any} args - Arguments to log\n   * @private\n   */\n  _log(...args) {\n    if (this.config.debug) {\n      console.log('[UIBridge]', ...args);\n    }\n  }\n\n  /**\n   * Get help information for commands - AI-friendly format\n   * @param {string} commandName - Specific command to get help for, or null for general help\n   * @returns {object} Help information structured for AI agents and developers\n   */\n  getHelp(commandName = null) {\n    if (commandName) {\n      // Get help for specific command\n      const command = this.registry.get(commandName);\n      if (!command) {\n        const available = this.registry.getAll().map(cmd => cmd.name).join(', ');\n        return {\n          error: `Unknown command: ${commandName}`,\n          availableCommands: available,\n          suggestion: `Use 'help' without arguments to see all commands`,\n          aiGuidance: `AI Agents: Use execute('help') to discover available commands or check spelling of '${commandName}'`\n        };\n      }\n\n      return {\n        command: command.name,\n        description: command.description,\n        parameters: command.parameters,\n        examples: command.examples || [],\n        usage: this._generateUsage(command),\n        aiTips: this._getAITipsForCommand(command.name)\n      };\n    }\n\n    // General help - AI-optimized\n    const commands = this.registry.getAll();\n    \n    return {\n      framework: 'UIBridge',\n      version: this.config.version || '1.0.0',\n      description: 'In-app automation framework for web applications - designed for AI agent control',\n      \n      // AI Quick Start Guide\n      aiQuickStart: {\n        step1: \"Execute commands using: await uibridge.execute('commandName', ...args)\",\n        step2: \"Find elements using selectors: CSS, text content, test IDs, XPath\",\n        step3: \"Handle errors with try/catch blocks\",\n        step4: \"Use await for all commands as they return promises\"\n      },\n\n      // Core commands with AI usage patterns\n      commands: commands.map(cmd => ({\n        name: cmd.name,\n        description: cmd.description,\n        parameters: cmd.parameters.length,\n        usage: this._generateUsage(cmd),\n        aiUseCase: this._getAIUseCase(cmd.name)\n      })),\n\n      // AI-optimized automation patterns\n      automationPatterns: {\n        'Click any button': {\n          pattern: \"execute('click', selector)\",\n          examples: [\n            \"execute('click', '#submit')\",\n            \"execute('click', { text: 'Submit' })\",\n            \"execute('click', { testId: 'submit-btn' })\"\n          ],\n          aiTip: \"Try multiple selector strategies if one fails\"\n        },\n        'Take screenshots': {\n          pattern: \"execute('screenshot', options)\",\n          examples: [\n            \"execute('screenshot', { fullPage: true })\",\n            \"execute('screenshot', { selector: '#content' })\",\n            \"execute('screenshot', { saveConfig: { autoSave: true } })\"\n          ],\n          aiTip: \"Screenshots are useful for verification and debugging\"\n        },\n        'Discover available actions': {\n          pattern: \"discover() or execute('help')\",\n          examples: [\n            \"const commands = uibridge.discover()\",\n            \"const help = await uibridge.execute('help')\"\n          ],\n          aiTip: \"Use this to understand what actions are available\"\n        }\n      },\n\n      // Selector strategies for AI agents\n      selectorStrategies: {\n        priority: \"Try strategies in this order for best results\",\n        strategies: {\n          1: { method: \"Test ID\", syntax: \"{ testId: 'element-id' }\", reliability: \"highest\" },\n          2: { method: \"CSS ID\", syntax: \"'#element-id'\", reliability: \"high\" },\n          3: { method: \"CSS Class\", syntax: \"'.class-name'\", reliability: \"medium\" },\n          4: { method: \"Text Content\", syntax: \"{ text: 'Button Text' }\", reliability: \"medium\" },\n          5: { method: \"Aria Label\", syntax: \"{ ariaLabel: 'Button Label' }\", reliability: \"medium\" },\n          6: { method: \"XPath\", syntax: \"{ xpath: '//button[text()=\\\"Submit\\\"]' }\", reliability: \"advanced\" }\n        }\n      },\n\n      // AI automation best practices\n      aiBestPractices: [\n        \"Always use await when executing commands\",\n        \"Wrap commands in try/catch blocks for error handling\",\n        \"Use specific selectors (ID, testId) when possible\",\n        \"Take screenshots to verify actions completed successfully\",\n        \"Use help('commandName') to understand specific command options\",\n        \"Check element existence before interaction\",\n        \"Wait for dynamic content to load before acting\"\n      ],\n\n      // Error handling guide for AI\n      errorHandling: {\n        \"Element not found\": {\n          solution: \"Try different selector strategies or wait for element to appear\",\n          code: \"try { await execute('click', '#btn'); } catch(e) { await execute('click', {text: 'Submit'}); }\"\n        },\n        \"Command failed\": {\n          solution: \"Check command syntax and parameters\",\n          code: \"const help = await execute('help', 'click'); console.log(help.usage);\"\n        },\n        \"Screenshot failed\": {\n          solution: \"Ensure element is visible and page is loaded\",\n          code: \"await execute('screenshot', { selector: 'body', fullPage: true });\"\n        }\n      },\n\n      // Workflow patterns for AI agents\n      workflowPatterns: {\n        \"Form submission\": [\n          \"1. Find and fill input fields\",\n          \"2. Click submit button\", \n          \"3. Take screenshot to verify\",\n          \"Example: execute('click', { text: 'Submit' })\"\n        ],\n        \"Navigation and verification\": [\n          \"1. Take screenshot of current state\",\n          \"2. Click navigation element\",\n          \"3. Wait for page load\",\n          \"4. Take screenshot to verify navigation\"\n        ],\n        \"Content interaction\": [\n          \"1. Find target element using multiple selector strategies\",\n          \"2. Execute action (click, screenshot, etc.)\",\n          \"3. Verify result with screenshot or status check\"\n        ]\n      },\n\n      // PowerShell REST API patterns for external AI agents\n      powershellPatterns: {\n        \"Basic Click Command\": {\n          description: \"Execute click action via PowerShell REST API\",\n          code: `$params = @{\n    Uri = 'http://localhost:3001/execute-command'\n    Method = 'POST'\n    Headers = @{ 'Content-Type' = 'application/json' }\n    Body = @{\n        command = 'click'\n        selector = '#submit-button'\n    } | ConvertTo-Json\n}\n$response = Invoke-RestMethod @params`\n        },\n        \"Screenshot with Auto-Save\": {\n          description: \"Take screenshot and save automatically\",\n          code: `$params = @{\n    Uri = 'http://localhost:3001/execute-command'\n    Method = 'POST'\n    Headers = @{ 'Content-Type' = 'application/json' }\n    Body = @{\n        command = 'screenshot'\n        options = @{\n            fullPage = $true\n            saveConfig = @{\n                autoSave = $true\n                folder = 'ai-automation'\n                timestamp = $true\n            }\n        }\n    } | ConvertTo-Json -Depth 4\n}\n$response = Invoke-RestMethod @params`\n        },\n        \"Reusable Function\": {\n          description: \"Create reusable PowerShell function for UIBridge commands\",\n          code: `function Invoke-UIBridgeCommand {\n    param([string]$Command, [hashtable]$Parameters = @{})\n    \n    $params = @{\n        Uri = 'http://localhost:3001/execute-command'\n        Method = 'POST'\n        Headers = @{ 'Content-Type' = 'application/json' }\n        Body = (@{ command = $Command } + $Parameters) | ConvertTo-Json -Depth 4\n    }\n    \n    try {\n        return Invoke-RestMethod @params\n    } catch {\n        Write-Error \"UIBridge command failed: $_\"\n        throw\n    }\n}\n\n# Usage:\nInvoke-UIBridgeCommand -Command 'click' -Parameters @{selector='#btn'}`\n        }\n      },\n\n      // External API information\n      restApiInfo: {\n        server: \"Start with: node server-example.cjs\",\n        baseUrl: \"http://localhost:3001\",\n        endpoints: {\n          executeCommand: \"POST /execute-command\",\n          getStatus: \"GET /status\", \n          getHelp: \"GET /discover-commands\"\n        },\n        powershellTips: [\n          \"Always use Invoke-RestMethod with hashtable splatting\",\n          \"Include proper error handling with try/catch blocks\",\n          \"Use ConvertTo-Json -Depth 4 for nested objects\",\n          \"Store common configuration in reusable variables\"\n        ]\n      }\n    };\n  }\n\n  /**\n   * Get AI-specific tips for a command\n   * @private\n   */\n  _getAITipsForCommand(commandName) {\n    const tips = {\n      click: [\n        \"Try multiple selector strategies if element not found\",\n        \"Use force: true option if element is covered\",\n        \"Consider scroll behavior - element might be off-screen\",\n        \"PowerShell API: Use selector parameter in request body\"\n      ],\n      screenshot: [\n        \"Use fullPage: true for complete page capture\",\n        \"Specify selector for element-specific screenshots\", \n        \"Set saveConfig for automatic file saving\",\n        \"PowerShell API: Use -Depth 4 with ConvertTo-Json for nested options\"\n      ],\n      help: [\n        \"Use without arguments for full command list\",\n        \"Specify command name for detailed help\",\n        \"Check usage examples for proper syntax\",\n        \"PowerShell API: Available at GET /discover-commands endpoint\"\n      ]\n    };\n    return tips[commandName] || [\"Execute with proper await syntax\", \"Handle errors with try/catch\"];\n  }\n\n  /**\n   * Get AI use case for a command\n   * @private\n   */\n  _getAIUseCase(commandName) {\n    const useCases = {\n      click: \"Interact with buttons, links, form elements, and any clickable UI component\",\n      screenshot: \"Capture visual state for verification, debugging, or documentation\",\n      help: \"Discover available commands and learn proper usage syntax\"\n    };\n    return useCases[commandName] || \"General automation command\";\n  }\n\n  /**\n   * Generate usage string for a command\n   * @private\n   */\n  _generateUsage(command) {\n    const params = command.parameters.map(p => {\n      const name = p.required ? p.name : `[${p.name}]`;\n      return name;\n    }).join(', ');\n\n    return `execute('${command.name}'${params ? ', ' + params : ''})`;\n  }\n\n  /**\n   * Add command to execution history\n   * @private\n   */\n  _addToHistory(entry) {\n    if (!this._commandHistory) {\n      this._commandHistory = [];\n    }\n\n    this._commandHistory.unshift(entry);\n    \n    // Keep only last 50 entries\n    if (this._commandHistory.length > 50) {\n      this._commandHistory = this._commandHistory.slice(0, 50);\n    }\n  }\n\n\n}\n\n// Auto-initialize on load if window is available\nif (typeof window !== 'undefined' && !window.UIBridge) {\n  window.UIBridge = UIBridge;\n} "],
  "mappings": "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",
  "names": ["src_exports", "__export", "CDIGenerator", "CommandRegistry", "SelectorEngine", "UIBridge", "clickCommand", "createUIBridge", "src_default", "initUIBridge", "name", "screenshotCommand", "version", "CommandRegistry", "name", "command", "requiredFields", "field", "SelectorEngine", "selector", "xpath", "result", "nodes", "text", "walker", "node", "id", "labelText", "labels", "label", "forAttr", "input", "placeholder", "role", "strategies", "strategy", "strategyFn", "element", "name", "rect", "style", "attrs", "attr", "CDIGenerator", "registry", "commands", "date", "markdown", "cmd", "params", "p", "param", "required", "example", "format", "content", "blob", "url", "a", "ts", "optionalParams", "requiredParams", "signature", "index", "spec", "path", "c", "sum", "str", "type", "parameters", "properties", "clickCommand", "bridge", "selector", "options", "element", "opts", "resolve", "rect", "position", "eventInit", "i", "error", "centerX", "centerY", "elementAtPoint", "positions", "button", "tagName", "inputType", "screenshotCommand", "bridge", "options", "opts", "targetElement", "loadError", "hiddenElements", "html2canvasOptions", "canvas", "_", "reject", "x", "mimeType", "dataUrl", "fileName", "result", "error", "config", "selectorStr", "timestamp", "format", "extension", "saveConfig", "response", "resolve", "dbName", "storeName", "request", "event", "db", "store", "screenshot", "addRequest", "cdnSources", "currentIndex", "tryLoadScript", "script", "existingScript", "selectors", "selector", "elements", "element", "originalDisplay", "link", "helpCommand", "bridge", "commandName", "UIBridge", "_UIBridge", "config", "CommandRegistry", "SelectorEngine", "CDIGenerator", "initTime", "error", "commandName", "args", "command", "available", "cmd", "startTime", "executionId", "historyEntry", "result", "duration", "enhancedResult", "selector", "limit", "name", "removed", "commands", "clickCommand", "screenshotCommand", "helpCommand", "implementation", "format", "eventName", "detail", "event", "params", "p", "entry", "createUIBridge", "config", "UIBridge", "initUIBridge", "bridge", "defaultInstance", "version", "name", "src_default"]
}

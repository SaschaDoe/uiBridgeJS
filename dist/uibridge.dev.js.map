{
  "version": 3,
  "sources": ["../src/index.js", "../src/core/CommandRegistry.js", "../src/core/SelectorEngine.js", "../src/discovery/CDIGenerator.js", "../src/commands/click.js", "../src/commands/screenshot.js", "../src/core/UIBridge.js"],
  "sourcesContent": ["/**\r\n * UIBridge - In-app automation framework for web applications\r\n * Version: 0.1.0\r\n */\r\n\r\n// Core exports\r\nexport { UIBridge } from './core/UIBridge.js';\r\nexport { CommandRegistry } from './core/CommandRegistry.js';\r\nexport { SelectorEngine } from './core/SelectorEngine.js';\r\n\r\n// Command exports\r\nexport { clickCommand } from './commands/click.js';\r\nexport { screenshotCommand } from './commands/screenshot.js';\r\n\r\n// Discovery exports\r\nexport { CDIGenerator } from './discovery/CDIGenerator.js';\r\n\r\n// Default instance for immediate use\r\nimport { UIBridge } from './core/UIBridge.js';\r\n\r\n/**\r\n * Create a new UIBridge instance with default configuration\r\n * @param {Object} config - Configuration options\r\n * @returns {UIBridge} UIBridge instance\r\n */\r\nexport function createUIBridge(config = {}) {\r\n  return new UIBridge({\r\n    debug: true,\r\n    generateCDI: true,\r\n    enableHttpDiscovery: true,\r\n    ...config\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize UIBridge with default settings (for quick setup)\r\n * @param {Object} config - Configuration options\r\n * @returns {Promise<UIBridge>} Initialized UIBridge instance\r\n */\r\nexport async function initUIBridge(config = {}) {\r\n  const bridge = createUIBridge(config);\r\n  await bridge.init();\r\n  return bridge;\r\n}\r\n\r\n// Auto-initialize default instance if in browser environment\r\nif (typeof window !== 'undefined') {\r\n  // Check if UIBridge is already initialized\r\n  if (!window.uibridge) {\r\n    const defaultInstance = createUIBridge({\r\n      debug: false,\r\n      generateCDI: false,\r\n      autoInit: true\r\n    });\r\n    \r\n    // Expose on window for global access\r\n    window.uibridge = defaultInstance;\r\n    \r\n    // Also expose the class for manual instantiation\r\n    window.UIBridge = UIBridge;\r\n    \r\n    // Development helpers\r\n    if (process?.env?.NODE_ENV === 'development' || window.location.hostname === 'localhost') {\r\n      window.createUIBridge = createUIBridge;\r\n      window.initUIBridge = initUIBridge;\r\n    }\r\n  }\r\n}\r\n\r\n// Version information\r\nexport const version = '0.1.0';\r\nexport const name = 'UIBridge';\r\n\r\n// Default export for convenience\r\nexport default UIBridge; ", "/**\r\n * CommandRegistry - Manages command registration and retrieval\r\n */\r\nexport class CommandRegistry {\r\n  constructor() {\r\n    this.commands = new Map();\r\n  }\r\n\r\n  /**\r\n   * Register a new command\r\n   * @param {string} name - Command name\r\n   * @param {Object} command - Command implementation\r\n   */\r\n  register(name, command) {\r\n    if (!name || typeof name !== 'string') {\r\n      throw new Error('Command name must be a non-empty string');\r\n    }\r\n\r\n    if (!command || typeof command.execute !== 'function') {\r\n      throw new Error('Command must have an execute function');\r\n    }\r\n\r\n    // Validate command structure\r\n    const requiredFields = ['name', 'description', 'parameters'];\r\n    for (const field of requiredFields) {\r\n      if (!command[field]) {\r\n        throw new Error(`Command must have a ${field} property`);\r\n      }\r\n    }\r\n\r\n    this.commands.set(name, {\r\n      ...command,\r\n      registeredAt: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a command by name\r\n   * @param {string} name - Command name\r\n   * @returns {Object|null} Command or null if not found\r\n   */\r\n  get(name) {\r\n    return this.commands.get(name) || null;\r\n  }\r\n\r\n  /**\r\n   * Get all registered commands\r\n   * @returns {Array} Array of all commands\r\n   */\r\n  getAll() {\r\n    return Array.from(this.commands.values());\r\n  }\r\n\r\n  /**\r\n   * Check if a command exists\r\n   * @param {string} name - Command name\r\n   * @returns {boolean} True if command exists\r\n   */\r\n  has(name) {\r\n    return this.commands.has(name);\r\n  }\r\n\r\n  /**\r\n   * Unregister a command\r\n   * @param {string} name - Command name\r\n   * @returns {boolean} True if command was removed\r\n   */\r\n  unregister(name) {\r\n    return this.commands.delete(name);\r\n  }\r\n\r\n  /**\r\n   * Get command names\r\n   * @returns {Array<string>} Array of command names\r\n   */\r\n  getNames() {\r\n    return Array.from(this.commands.keys());\r\n  }\r\n\r\n  /**\r\n   * Clear all commands\r\n   */\r\n  clear() {\r\n    this.commands.clear();\r\n  }\r\n\r\n  /**\r\n   * Get commands count\r\n   * @returns {number} Number of registered commands\r\n   */\r\n  size() {\r\n    return this.commands.size;\r\n  }\r\n} ", "/**\r\n * SelectorEngine - Handles different selector strategies for finding DOM elements\r\n */\r\nexport class SelectorEngine {\r\n  constructor() {\r\n    this.strategies = new Map();\r\n    this._setupDefaultStrategies();\r\n  }\r\n\r\n  /**\r\n   * Setup default selector strategies\r\n   * @private\r\n   */\r\n  _setupDefaultStrategies() {\r\n    // CSS Selector\r\n    this.strategies.set('css', (selector) => {\r\n      return document.querySelector(selector);\r\n    });\r\n\r\n    // CSS Selector for multiple elements\r\n    this.strategies.set('cssAll', (selector) => {\r\n      return Array.from(document.querySelectorAll(selector));\r\n    });\r\n\r\n    // XPath\r\n    this.strategies.set('xpath', (xpath) => {\r\n      const result = document.evaluate(\r\n        xpath,\r\n        document,\r\n        null,\r\n        XPathResult.FIRST_ORDERED_NODE_TYPE,\r\n        null\r\n      );\r\n      return result.singleNodeValue;\r\n    });\r\n\r\n    // XPath for multiple elements\r\n    this.strategies.set('xpathAll', (xpath) => {\r\n      const result = document.evaluate(\r\n        xpath,\r\n        document,\r\n        null,\r\n        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\r\n        null\r\n      );\r\n      const nodes = [];\r\n      for (let i = 0; i < result.snapshotLength; i++) {\r\n        nodes.push(result.snapshotItem(i));\r\n      }\r\n      return nodes;\r\n    });\r\n\r\n    // Text content\r\n    this.strategies.set('text', (text) => {\r\n      const walker = document.createTreeWalker(\r\n        document.body,\r\n        NodeFilter.SHOW_TEXT,\r\n        null,\r\n        false\r\n      );\r\n      \r\n      let node;\r\n      while (node = walker.nextNode()) {\r\n        if (node.textContent.trim() === text) {\r\n          return node.parentElement;\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Partial text content\r\n    this.strategies.set('partialText', (text) => {\r\n      const walker = document.createTreeWalker(\r\n        document.body,\r\n        NodeFilter.SHOW_TEXT,\r\n        null,\r\n        false\r\n      );\r\n      \r\n      let node;\r\n      while (node = walker.nextNode()) {\r\n        if (node.textContent.trim().includes(text)) {\r\n          return node.parentElement;\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Data-testid\r\n    this.strategies.set('testId', (id) => {\r\n      return document.querySelector(`[data-testid=\"${id}\"]`);\r\n    });\r\n\r\n    // Data-test attribute\r\n    this.strategies.set('dataTest', (id) => {\r\n      return document.querySelector(`[data-test=\"${id}\"]`);\r\n    });\r\n\r\n    // Label (for form inputs)\r\n    this.strategies.set('label', (labelText) => {\r\n      const labels = document.querySelectorAll('label');\r\n      for (const label of labels) {\r\n        if (label.textContent.trim() === labelText) {\r\n          const forAttr = label.getAttribute('for');\r\n          if (forAttr) {\r\n            return document.getElementById(forAttr);\r\n          }\r\n          // Check for nested input\r\n          const input = label.querySelector('input, select, textarea');\r\n          if (input) {\r\n            return input;\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Placeholder\r\n    this.strategies.set('placeholder', (placeholder) => {\r\n      return document.querySelector(`[placeholder=\"${placeholder}\"]`);\r\n    });\r\n\r\n    // Aria-label\r\n    this.strategies.set('ariaLabel', (label) => {\r\n      return document.querySelector(`[aria-label=\"${label}\"]`);\r\n    });\r\n\r\n    // Role\r\n    this.strategies.set('role', (role) => {\r\n      return document.querySelector(`[role=\"${role}\"]`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Find a single element\r\n   * @param {string|Object} selector - Selector configuration\r\n   * @returns {Element|null} Found element or null\r\n   */\r\n  find(selector) {\r\n    // String = CSS selector\r\n    if (typeof selector === 'string') {\r\n      return this.strategies.get('css')(selector);\r\n    }\r\n\r\n    // Object selectors\r\n    if (typeof selector === 'object' && selector !== null) {\r\n      const strategies = [\r\n        'xpath', 'text', 'partialText', 'testId', 'dataTest',\r\n        'label', 'placeholder', 'ariaLabel', 'role', 'css'\r\n      ];\r\n\r\n      for (const strategy of strategies) {\r\n        if (selector[strategy]) {\r\n          const strategyFn = this.strategies.get(strategy);\r\n          if (strategyFn) {\r\n            const element = strategyFn(selector[strategy]);\r\n            if (element) {\r\n              return element;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    throw new Error(`Invalid selector: ${JSON.stringify(selector)}`);\r\n  }\r\n\r\n  /**\r\n   * Find multiple elements\r\n   * @param {string|Object} selector - Selector configuration\r\n   * @returns {Array<Element>} Found elements\r\n   */\r\n  findAll(selector) {\r\n    // String = CSS selector\r\n    if (typeof selector === 'string') {\r\n      return this.strategies.get('cssAll')(selector);\r\n    }\r\n\r\n    // Object selectors\r\n    if (typeof selector === 'object' && selector !== null) {\r\n      if (selector.xpath) {\r\n        return this.strategies.get('xpathAll')(selector.xpath);\r\n      }\r\n      if (selector.css) {\r\n        return this.strategies.get('cssAll')(selector.css);\r\n      }\r\n      // For other strategies, find single and wrap in array\r\n      const element = this.find(selector);\r\n      return element ? [element] : [];\r\n    }\r\n\r\n    throw new Error(`Invalid selector: ${JSON.stringify(selector)}`);\r\n  }\r\n\r\n  /**\r\n   * Register a custom selector strategy\r\n   * @param {string} name - Strategy name\r\n   * @param {Function} strategy - Strategy function\r\n   */\r\n  registerStrategy(name, strategy) {\r\n    if (typeof strategy !== 'function') {\r\n      throw new Error('Strategy must be a function');\r\n    }\r\n    this.strategies.set(name, strategy);\r\n  }\r\n\r\n  /**\r\n   * Check if element is visible\r\n   * @param {Element} element - Element to check\r\n   * @returns {boolean} True if element is visible\r\n   */\r\n  isVisible(element) {\r\n    if (!element) return false;\r\n\r\n    const rect = element.getBoundingClientRect();\r\n    const style = window.getComputedStyle(element);\r\n    \r\n    return (\r\n      rect.width > 0 &&\r\n      rect.height > 0 &&\r\n      style.display !== 'none' &&\r\n      style.visibility !== 'hidden' &&\r\n      parseFloat(style.opacity) > 0 &&\r\n      rect.top < window.innerHeight &&\r\n      rect.bottom > 0 &&\r\n      rect.left < window.innerWidth &&\r\n      rect.right > 0\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get element information\r\n   * @param {Element} element - Element to analyze\r\n   * @returns {Object} Element information\r\n   */\r\n  getElementInfo(element) {\r\n    if (!element) return null;\r\n\r\n    const rect = element.getBoundingClientRect();\r\n    const style = window.getComputedStyle(element);\r\n\r\n    return {\r\n      tag: element.tagName.toLowerCase(),\r\n      id: element.id || null,\r\n      classes: Array.from(element.classList),\r\n      text: element.textContent?.trim().substring(0, 100) || '',\r\n      attributes: this._getElementAttributes(element),\r\n      position: {\r\n        x: rect.left,\r\n        y: rect.top,\r\n        width: rect.width,\r\n        height: rect.height\r\n      },\r\n      visible: this.isVisible(element),\r\n      focusable: this._isFocusable(element)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get element attributes\r\n   * @param {Element} element - Element to analyze\r\n   * @returns {Object} Element attributes\r\n   * @private\r\n   */\r\n  _getElementAttributes(element) {\r\n    const attrs = {};\r\n    for (const attr of element.attributes) {\r\n      attrs[attr.name] = attr.value;\r\n    }\r\n    return attrs;\r\n  }\r\n\r\n  /**\r\n   * Check if element is focusable\r\n   * @param {Element} element - Element to check\r\n   * @returns {boolean} True if element is focusable\r\n   * @private\r\n   */\r\n  _isFocusable(element) {\r\n    const focusableTags = ['input', 'select', 'textarea', 'button', 'a'];\r\n    return focusableTags.includes(element.tagName.toLowerCase()) ||\r\n           element.hasAttribute('tabindex') ||\r\n           element.hasAttribute('contenteditable');\r\n  }\r\n} ", "/**\r\n * CDIGenerator - Command Discovery Interface Generator\r\n * Generates documentation and discovery files for available commands\r\n */\r\nexport class CDIGenerator {\r\n  constructor(registry) {\r\n    this.registry = registry;\r\n    this.version = '1.0.0';\r\n  }\r\n\r\n  /**\r\n   * Generate markdown documentation\r\n   * @returns {string} Markdown documentation\r\n   */\r\n  generateMarkdown() {\r\n    const commands = this.registry.getAll();\r\n    const date = new Date().toISOString();\r\n    \r\n    let markdown = `# UIBridge Commands Documentation\\n\\n`;\r\n    markdown += `**Generated:** ${date}  \\n`;\r\n    markdown += `**Version:** ${this.version}  \\n`;\r\n    markdown += `**Total Commands:** ${commands.length}\\n\\n`;\r\n    \r\n    // Summary table\r\n    markdown += `## Command Summary\\n\\n`;\r\n    markdown += `| Command | Description | Parameters |\\n`;\r\n    markdown += `|---------|-------------|------------|\\n`;\r\n    \r\n    commands.forEach(cmd => {\r\n      const params = cmd.parameters.map(p => \r\n        `${p.name}${p.required ? '' : '?'}`\r\n      ).join(', ');\r\n      markdown += `| **${cmd.name}** | ${cmd.description} | ${params || 'None'} |\\n`;\r\n    });\r\n    \r\n    // Detailed documentation\r\n    markdown += `\\n## Command Details\\n\\n`;\r\n    \r\n    commands.forEach(cmd => {\r\n      markdown += `### ${cmd.name}\\n\\n`;\r\n      markdown += `${cmd.description}\\n\\n`;\r\n      \r\n      if (cmd.parameters.length > 0) {\r\n        markdown += `**Parameters:**\\n\\n`;\r\n        cmd.parameters.forEach(param => {\r\n          const required = param.required ? '**required**' : '*optional*';\r\n          markdown += `- \\`${param.name}\\` (${param.type}) - ${required}  \\n`;\r\n          markdown += `  ${param.description}\\n`;\r\n        });\r\n        markdown += '\\n';\r\n      }\r\n      \r\n      if (cmd.examples && cmd.examples.length > 0) {\r\n        markdown += `**Examples:**\\n\\n`;\r\n        cmd.examples.forEach(example => {\r\n          markdown += `\\`\\`\\`javascript\\n${example}\\n\\`\\`\\`\\n\\n`;\r\n        });\r\n      }\r\n      \r\n      markdown += `---\\n\\n`;\r\n    });\r\n    \r\n    return markdown;\r\n  }\r\n\r\n  /**\r\n   * Generate JSON schema for commands\r\n   * @returns {Object} JSON schema\r\n   */\r\n  generateJSON() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    return {\r\n      version: this.version,\r\n      generated: new Date().toISOString(),\r\n      commands: commands.map(cmd => ({\r\n        name: cmd.name,\r\n        description: cmd.description,\r\n        parameters: cmd.parameters,\r\n        examples: cmd.examples || []\r\n      }))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save documentation to file\r\n   * @param {string} format - Format (markdown, json)\r\n   */\r\n  async saveToFile(format = 'markdown') {\r\n    const content = format === 'json' \r\n      ? JSON.stringify(this.generateJSON(), null, 2)\r\n      : this.generateMarkdown();\r\n    \r\n    const blob = new Blob([content], { \r\n      type: format === 'json' ? 'application/json' : 'text/markdown' \r\n    });\r\n    \r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `uibridge-commands.${format === 'json' ? 'json' : 'md'}`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Generate TypeScript definitions\r\n   * @returns {string} TypeScript definitions\r\n   */\r\n  generateTypeScript() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    let ts = `// UIBridge Command Definitions\\n`;\r\n    ts += `// Generated: ${new Date().toISOString()}\\n\\n`;\r\n    \r\n    // Generate interface for each command's options\r\n    commands.forEach(cmd => {\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      if (optionalParams.length > 0) {\r\n        ts += `interface ${this._capitalize(cmd.name)}Options {\\n`;\r\n        optionalParams.forEach(param => {\r\n          ts += `  ${param.name}?: ${this._mapTypeToTS(param.type)}; // ${param.description}\\n`;\r\n        });\r\n        ts += `}\\n\\n`;\r\n      }\r\n    });\r\n    \r\n    // Generate main UIBridge interface\r\n    ts += `interface UIBridge {\\n`;\r\n    commands.forEach(cmd => {\r\n      const requiredParams = cmd.parameters.filter(p => p.required);\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      \r\n      let signature = `  ${cmd.name}(`;\r\n      \r\n      // Add required parameters\r\n      requiredParams.forEach((param, index) => {\r\n        if (index > 0) signature += ', ';\r\n        signature += `${param.name}: ${this._mapTypeToTS(param.type)}`;\r\n      });\r\n      \r\n      // Add optional parameters as options object\r\n      if (optionalParams.length > 0) {\r\n        if (requiredParams.length > 0) signature += ', ';\r\n        signature += `options?: ${this._capitalize(cmd.name)}Options`;\r\n      }\r\n      \r\n      signature += `): Promise<any>; // ${cmd.description}\\n`;\r\n      ts += signature;\r\n    });\r\n    ts += `}\\n\\n`;\r\n    \r\n    // Export types\r\n    ts += `export { UIBridge };\\n`;\r\n    commands.forEach(cmd => {\r\n      const optionalParams = cmd.parameters.filter(p => !p.required);\r\n      if (optionalParams.length > 0) {\r\n        ts += `export { ${this._capitalize(cmd.name)}Options };\\n`;\r\n      }\r\n    });\r\n    \r\n    return ts;\r\n  }\r\n\r\n  /**\r\n   * Generate OpenAPI specification\r\n   * @returns {Object} OpenAPI spec\r\n   */\r\n  generateOpenAPI() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    const spec = {\r\n      openapi: \"3.0.0\",\r\n      info: {\r\n        title: \"UIBridge API\",\r\n        description: \"In-app automation framework for web applications\",\r\n        version: this.version,\r\n        contact: {\r\n          name: \"UIBridge Team\"\r\n        }\r\n      },\r\n      servers: [\r\n        {\r\n          url: \"http://localhost:3000\",\r\n          description: \"Local development server\"\r\n        }\r\n      ],\r\n      paths: {},\r\n      components: {\r\n        schemas: {}\r\n      }\r\n    };\r\n    \r\n    // Generate paths for each command\r\n    commands.forEach(cmd => {\r\n      const path = `/commands/${cmd.name}`;\r\n      spec.paths[path] = {\r\n        post: {\r\n          summary: cmd.description,\r\n          description: cmd.description,\r\n          requestBody: {\r\n            required: true,\r\n            content: {\r\n              \"application/json\": {\r\n                schema: {\r\n                  type: \"object\",\r\n                  properties: this._generateJSONSchema(cmd.parameters),\r\n                  required: cmd.parameters.filter(p => p.required).map(p => p.name)\r\n                }\r\n              }\r\n            }\r\n          },\r\n          responses: {\r\n            \"200\": {\r\n              description: \"Command executed successfully\",\r\n              content: {\r\n                \"application/json\": {\r\n                  schema: {\r\n                    type: \"object\",\r\n                    properties: {\r\n                      success: { type: \"boolean\" },\r\n                      result: { type: \"object\" },\r\n                      timestamp: { type: \"string\", format: \"date-time\" }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"400\": {\r\n              description: \"Invalid parameters\"\r\n            },\r\n            \"500\": {\r\n              description: \"Command execution failed\"\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n    \r\n    return spec;\r\n  }\r\n\r\n  /**\r\n   * Get live command statistics\r\n   * @returns {Object} Command statistics\r\n   */\r\n  getStatistics() {\r\n    const commands = this.registry.getAll();\r\n    \r\n    return {\r\n      totalCommands: commands.length,\r\n      commandNames: commands.map(c => c.name),\r\n      totalParameters: commands.reduce((sum, cmd) => sum + cmd.parameters.length, 0),\r\n      requiredParameters: commands.reduce((sum, cmd) => \r\n        sum + cmd.parameters.filter(p => p.required).length, 0),\r\n      optionalParameters: commands.reduce((sum, cmd) => \r\n        sum + cmd.parameters.filter(p => !p.required).length, 0),\r\n      commandsWithExamples: commands.filter(cmd => cmd.examples && cmd.examples.length > 0).length,\r\n      averageParametersPerCommand: Math.round(\r\n        commands.reduce((sum, cmd) => sum + cmd.parameters.length, 0) / commands.length * 100\r\n      ) / 100,\r\n      lastGenerated: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper: Capitalize string\r\n   * @param {string} str - String to capitalize\r\n   * @returns {string} Capitalized string\r\n   * @private\r\n   */\r\n  _capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  /**\r\n   * Helper: Map parameter type to TypeScript type\r\n   * @param {string} type - Parameter type\r\n   * @returns {string} TypeScript type\r\n   * @private\r\n   */\r\n  _mapTypeToTS(type) {\r\n    const typeMap = {\r\n      'string': 'string',\r\n      'number': 'number',\r\n      'boolean': 'boolean',\r\n      'object': 'object',\r\n      'array': 'any[]',\r\n      'Selector': 'string | object',\r\n      'ClickOptions': 'object',\r\n      'ScreenshotOptions': 'object'\r\n    };\r\n    \r\n    return typeMap[type] || 'any';\r\n  }\r\n\r\n  /**\r\n   * Helper: Generate JSON schema for parameters\r\n   * @param {Array} parameters - Command parameters\r\n   * @returns {Object} JSON schema properties\r\n   * @private\r\n   */\r\n  _generateJSONSchema(parameters) {\r\n    const properties = {};\r\n    \r\n    parameters.forEach(param => {\r\n      properties[param.name] = {\r\n        type: this._mapTypeToJSONSchema(param.type),\r\n        description: param.description\r\n      };\r\n      \r\n      if (param.default !== undefined) {\r\n        properties[param.name].default = param.default;\r\n      }\r\n    });\r\n    \r\n    return properties;\r\n  }\r\n\r\n  /**\r\n   * Helper: Map parameter type to JSON Schema type\r\n   * @param {string} type - Parameter type\r\n   * @returns {string} JSON Schema type\r\n   * @private\r\n   */\r\n  _mapTypeToJSONSchema(type) {\r\n    const typeMap = {\r\n      'string': 'string',\r\n      'number': 'number',\r\n      'boolean': 'boolean',\r\n      'object': 'object',\r\n      'array': 'array',\r\n      'Selector': 'string', // Simplified for JSON schema\r\n      'ClickOptions': 'object',\r\n      'ScreenshotOptions': 'object'\r\n    };\r\n    \r\n    return typeMap[type] || 'string';\r\n  }\r\n} ", "/**\r\n * Click Command - Synthetic click interactions\r\n */\r\nexport const clickCommand = {\r\n  name: 'click',\r\n  description: 'Clicks on an element using synthetic mouse events',\r\n  parameters: [\r\n    {\r\n      name: 'selector',\r\n      type: 'Selector',\r\n      required: true,\r\n      description: 'Element to click (string, CSS selector, or selector object)'\r\n    },\r\n    {\r\n      name: 'options',\r\n      type: 'ClickOptions',\r\n      required: false,\r\n      description: 'Click options: { force?, position?, button?, clickCount?, delay? }'\r\n    }\r\n  ],\r\n  examples: [\r\n    \"await uibridge.execute('click', '#submit-button')\",\r\n    \"await uibridge.execute('click', { testId: 'login-btn' })\",\r\n    \"await uibridge.execute('click', 'button', { position: 'topLeft', clickCount: 2 })\"\r\n  ],\r\n\r\n  async execute(bridge, selector, options = {}) {\r\n    const element = bridge.findElement(selector);\r\n    if (!element) {\r\n      throw new Error(`Element not found: ${JSON.stringify(selector)}`);\r\n    }\r\n\r\n    // Default options\r\n    const opts = {\r\n      force: false,\r\n      position: 'center', // center, topLeft, topRight, bottomLeft, bottomRight\r\n      button: 'left',     // left, right, middle\r\n      clickCount: 1,\r\n      delay: 0,\r\n      scrollIntoView: true,\r\n      ...options\r\n    };\r\n\r\n    // Log the action\r\n    bridge._log(`Clicking element: ${bridge.selectorEngine.getElementInfo(element)?.tag || 'unknown'}`);\r\n\r\n    // Scroll element into view if requested\r\n    if (opts.scrollIntoView) {\r\n      element.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n      // Small delay to allow scroll to complete\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n    }\r\n\r\n    // Check visibility unless force is true\r\n    if (!opts.force) {\r\n      const isVisible = bridge.selectorEngine.isVisible(element);\r\n      if (!isVisible) {\r\n        throw new Error('Element is not visible. Use { force: true } to click anyway.');\r\n      }\r\n    }\r\n\r\n    // Check if element is actionable (not covered by another element)\r\n    if (!opts.force) {\r\n      const isActionable = this._isElementActionable(element);\r\n      if (!isActionable) {\r\n        throw new Error('Element is covered by another element. Use { force: true } to click anyway.');\r\n      }\r\n    }\r\n\r\n    // Calculate click position\r\n    const rect = element.getBoundingClientRect();\r\n    const position = this._calculatePosition(rect, opts.position);\r\n\r\n    // Create synthetic mouse events\r\n    const eventInit = {\r\n      bubbles: true,\r\n      cancelable: true,\r\n      view: window,\r\n      clientX: position.x,\r\n      clientY: position.y,\r\n      button: this._getButtonCode(opts.button),\r\n      buttons: this._getButtonsCode(opts.button),\r\n      detail: opts.clickCount\r\n    };\r\n\r\n    // Dispatch mouse events sequence\r\n    try {\r\n      // Hover first\r\n      element.dispatchEvent(new MouseEvent('mouseover', eventInit));\r\n      element.dispatchEvent(new MouseEvent('mouseenter', eventInit));\r\n\r\n      // Mouse down\r\n      element.dispatchEvent(new MouseEvent('mousedown', eventInit));\r\n      \r\n      // Optional delay between mousedown and mouseup\r\n      if (opts.delay > 0) {\r\n        await new Promise(resolve => setTimeout(resolve, opts.delay));\r\n      }\r\n      \r\n      // Mouse up\r\n      element.dispatchEvent(new MouseEvent('mouseup', eventInit));\r\n      \r\n      // Click event(s)\r\n      for (let i = 0; i < opts.clickCount; i++) {\r\n        if (i > 0) {\r\n          await new Promise(resolve => setTimeout(resolve, 50)); // Small delay between multiple clicks\r\n        }\r\n        element.dispatchEvent(new MouseEvent('click', {\r\n          ...eventInit,\r\n          detail: i + 1\r\n        }));\r\n      }\r\n\r\n      // Focus element if it's focusable\r\n      if (bridge.selectorEngine._isFocusable(element)) {\r\n        element.focus();\r\n      }\r\n\r\n      // Special handling for different element types\r\n      await this._handleSpecialElements(element, opts);\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to click element: ${error.message}`);\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      element: bridge.selectorEngine.getElementInfo(element),\r\n      position: position,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Check if element is actionable (not covered by another element)\r\n   * @param {Element} element - Element to check\r\n   * @returns {boolean} True if element is actionable\r\n   * @private\r\n   */\r\n  _isElementActionable(element) {\r\n    const rect = element.getBoundingClientRect();\r\n    const centerX = rect.left + rect.width / 2;\r\n    const centerY = rect.top + rect.height / 2;\r\n    \r\n    const elementAtPoint = document.elementFromPoint(centerX, centerY);\r\n    \r\n    // Check if the element at the point is the same element or a descendant\r\n    return element === elementAtPoint || element.contains(elementAtPoint);\r\n  },\r\n\r\n  /**\r\n   * Calculate click position based on position option\r\n   * @param {DOMRect} rect - Element bounding rectangle\r\n   * @param {string} position - Position option\r\n   * @returns {Object} Coordinates {x, y}\r\n   * @private\r\n   */\r\n  _calculatePosition(rect, position) {\r\n    const positions = {\r\n      center: { \r\n        x: rect.left + rect.width / 2, \r\n        y: rect.top + rect.height / 2 \r\n      },\r\n      topLeft: { \r\n        x: rect.left + 1, \r\n        y: rect.top + 1 \r\n      },\r\n      topRight: { \r\n        x: rect.right - 1, \r\n        y: rect.top + 1 \r\n      },\r\n      bottomLeft: { \r\n        x: rect.left + 1, \r\n        y: rect.bottom - 1 \r\n      },\r\n      bottomRight: { \r\n        x: rect.right - 1, \r\n        y: rect.bottom - 1 \r\n      },\r\n      topCenter: {\r\n        x: rect.left + rect.width / 2,\r\n        y: rect.top + 1\r\n      },\r\n      bottomCenter: {\r\n        x: rect.left + rect.width / 2,\r\n        y: rect.bottom - 1\r\n      },\r\n      leftCenter: {\r\n        x: rect.left + 1,\r\n        y: rect.top + rect.height / 2\r\n      },\r\n      rightCenter: {\r\n        x: rect.right - 1,\r\n        y: rect.top + rect.height / 2\r\n      }\r\n    };\r\n    \r\n    return positions[position] || positions.center;\r\n  },\r\n\r\n  /**\r\n   * Get mouse button code\r\n   * @param {string} button - Button name\r\n   * @returns {number} Button code\r\n   * @private\r\n   */\r\n  _getButtonCode(button) {\r\n    const buttons = {\r\n      left: 0,\r\n      middle: 1,\r\n      right: 2\r\n    };\r\n    return buttons[button] || 0;\r\n  },\r\n\r\n  /**\r\n   * Get mouse buttons bitmask\r\n   * @param {string} button - Button name\r\n   * @returns {number} Buttons bitmask\r\n   * @private\r\n   */\r\n  _getButtonsCode(button) {\r\n    const buttons = {\r\n      left: 1,\r\n      middle: 4,\r\n      right: 2\r\n    };\r\n    return buttons[button] || 1;\r\n  },\r\n\r\n  /**\r\n   * Handle special element types (forms, checkboxes, etc.)\r\n   * @param {Element} element - Element that was clicked\r\n   * @param {Object} opts - Click options\r\n   * @private\r\n   */\r\n  async _handleSpecialElements(element, opts) {\r\n    const tagName = element.tagName.toLowerCase();\r\n    const inputType = element.type?.toLowerCase();\r\n\r\n    // Handle form submission\r\n    if (tagName === 'button' && element.type === 'submit') {\r\n      const form = element.closest('form');\r\n      if (form) {\r\n        // Let the natural form submission happen\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Handle checkbox/radio button state\r\n    if (tagName === 'input' && (inputType === 'checkbox' || inputType === 'radio')) {\r\n      // The native click event should handle the state change\r\n      return;\r\n    }\r\n\r\n    // Handle select elements\r\n    if (tagName === 'select') {\r\n      // Dispatch change event after click\r\n      setTimeout(() => {\r\n        element.dispatchEvent(new Event('change', { bubbles: true }));\r\n      }, 10);\r\n    }\r\n\r\n    // Handle links\r\n    if (tagName === 'a' && element.href) {\r\n      // Let natural navigation happen, but can be intercepted if needed\r\n      return;\r\n    }\r\n  }\r\n}; ", "/**\r\n * Screenshot Command - Capture page or element screenshots\r\n */\r\nexport const screenshotCommand = {\r\n  name: 'screenshot',\r\n  description: 'Takes a screenshot of the page or a specific element',\r\n  parameters: [\r\n    {\r\n      name: 'options',\r\n      type: 'ScreenshotOptions',\r\n      required: false,\r\n      description: 'Screenshot options: { selector?, format?, quality?, fullPage?, saveConfig? }'\r\n    }\r\n  ],\r\n  examples: [\r\n    \"await uibridge.execute('screenshot')\",\r\n    \"await uibridge.execute('screenshot', { selector: '#main-content' })\",\r\n    \"await uibridge.execute('screenshot', { saveConfig: { folder: 'test-screenshots', autoSave: true } })\"\r\n  ],\r\n\r\n  async execute(bridge, options = {}) {\r\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Starting screenshot command execution');\r\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Raw options received:', JSON.stringify(options, null, 2));\r\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Bridge config:', JSON.stringify(bridge.config.defaultScreenshotConfig, null, 2));\r\n    \r\n    const opts = {\r\n      selector: null,\r\n      format: 'png',         // png, jpeg, webp\r\n      quality: 0.92,         // 0-1 for jpeg/webp\r\n      fullPage: false,       // capture entire page\r\n      excludeSelectors: [],  // elements to hide during capture\r\n      backgroundColor: null, // background color override\r\n      scale: window.devicePixelRatio || 1,\r\n      \r\n      // Enhanced save configuration\r\n      saveConfig: {\r\n        // Use bridge default config as base\r\n        ...bridge.config.defaultScreenshotConfig,\r\n        // Override with user options\r\n        ...options.saveConfig\r\n      },\r\n      \r\n      ...options\r\n    };\r\n\r\n    console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Final processed options:', JSON.stringify(opts, null, 2));\r\n    \r\n    // Log the action\r\n    bridge._log(`Taking screenshot with options:`, opts);\r\n\r\n    let targetElement = document.body;\r\n    \r\n    // Find specific element if selector provided\r\n    if (opts.selector) {\r\n      targetElement = bridge.findElement(opts.selector);\r\n      if (!targetElement) {\r\n        throw new Error(`Element not found for screenshot: ${JSON.stringify(opts.selector)}`);\r\n      }\r\n    }\r\n\r\n    try {\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Target element:', targetElement?.tagName, targetElement?.id, targetElement?.className);\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Target element dimensions:', {\r\n        width: targetElement?.offsetWidth,\r\n        height: targetElement?.offsetHeight,\r\n        scrollWidth: targetElement?.scrollWidth,\r\n        scrollHeight: targetElement?.scrollHeight\r\n      });\r\n      \r\n      // Load html2canvas library if not already loaded\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Loading html2canvas...');\r\n      await this._ensureHtml2Canvas();\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas loaded:', !!window.html2canvas);\r\n      \r\n      // Temporarily hide excluded elements\r\n      const hiddenElements = this._hideElements(opts.excludeSelectors);\r\n      \r\n      // Prepare capture options\r\n      const html2canvasOptions = {\r\n        useCORS: true,\r\n        allowTaint: false,\r\n        backgroundColor: opts.backgroundColor,\r\n        scale: opts.scale,\r\n        logging: true, // Force logging for debugging\r\n        width: opts.fullPage ? document.documentElement.scrollWidth : undefined,\r\n        height: opts.fullPage ? document.documentElement.scrollHeight : undefined,\r\n        windowWidth: opts.fullPage ? document.documentElement.scrollWidth : undefined,\r\n        windowHeight: opts.fullPage ? document.documentElement.scrollHeight : undefined,\r\n        x: opts.fullPage ? 0 : undefined,\r\n        y: opts.fullPage ? 0 : undefined,\r\n        // Improve image quality\r\n        foreignObjectRendering: true,\r\n        imageTimeout: 15000,\r\n        removeContainer: true\r\n      };\r\n\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] html2canvas options:', JSON.stringify(html2canvasOptions, null, 2));\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Starting html2canvas capture...');\r\n      \r\n      // Capture the screenshot\r\n      const canvas = await window.html2canvas(targetElement, html2canvasOptions);\r\n      \r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Canvas created:', {\r\n        width: canvas.width,\r\n        height: canvas.height,\r\n        hasData: canvas.getContext('2d').getImageData(0, 0, 1, 1).data.some(x => x !== 0)\r\n      });\r\n      \r\n      // Restore hidden elements\r\n      this._restoreElements(hiddenElements);\r\n\r\n      // Convert to desired format\r\n      const mimeType = `image/${opts.format}`;\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Converting to format:', mimeType, 'quality:', opts.quality);\r\n      const dataUrl = canvas.toDataURL(mimeType, opts.quality);\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] DataURL created, length:', dataUrl.length, 'starts with:', dataUrl.substring(0, 50));\r\n      \r\n      // Generate filename based on configuration\r\n      const fileName = this._generateFileName(opts);\r\n      console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Generated filename:', fileName);\r\n      \r\n      // Auto-save if configured\r\n      if (opts.saveConfig.autoSave) {\r\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Auto-save enabled, saving...');\r\n        await this._saveScreenshot(dataUrl, fileName, opts.saveConfig);\r\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Save completed');\r\n      } else {\r\n        console.log('\uD83D\uDDBC\uFE0F [SCREENSHOT] Auto-save disabled');\r\n      }\r\n\r\n      const result = {\r\n        success: true,\r\n        dataUrl,\r\n        width: canvas.width,\r\n        height: canvas.height,\r\n        format: opts.format,\r\n        fileName,\r\n        filePath: opts.saveConfig.folder ? `${opts.saveConfig.folder}/${fileName}` : fileName,\r\n        size: Math.round(dataUrl.length * 0.75), // Approximate file size in bytes\r\n        timestamp: new Date().toISOString(),\r\n        saveConfig: opts.saveConfig\r\n      };\r\n\r\n      // Add element info if specific element was captured\r\n      if (opts.selector) {\r\n        result.element = bridge.selectorEngine.getElementInfo(targetElement);\r\n        \r\n        // Add element info to metadata if requested\r\n        if (opts.saveConfig.includeMetadata) {\r\n          result.metadata = {\r\n            selector: opts.selector,\r\n            element: result.element,\r\n            viewport: {\r\n              width: window.innerWidth,\r\n              height: window.innerHeight\r\n            },\r\n            userAgent: navigator.userAgent,\r\n            timestamp: result.timestamp\r\n          };\r\n        }\r\n      }\r\n\r\n      bridge._log(`Screenshot captured: ${result.width}x${result.height}, ${result.size} bytes, saved as: ${result.filePath}`);\r\n      \r\n      return result;\r\n\r\n    } catch (error) {\r\n      throw new Error(`Failed to take screenshot: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Generate filename based on configuration\r\n   * @param {Object} opts - Screenshot options\r\n   * @returns {string} Generated filename\r\n   * @private\r\n   */\r\n  _generateFileName(opts) {\r\n    const config = opts.saveConfig;\r\n    \r\n    // Use custom name if provided\r\n    if (config.customName) {\r\n      return this._ensureExtension(config.customName, opts.format);\r\n    }\r\n    \r\n    let fileName = config.prefix || 'screenshot';\r\n    \r\n    // Add metadata to filename if requested\r\n    if (config.includeMetadata) {\r\n      if (opts.selector) {\r\n        const selectorStr = typeof opts.selector === 'string' \r\n          ? opts.selector.replace(/[#.]/g, '').substring(0, 20)\r\n          : 'element';\r\n        fileName += `_${selectorStr}`;\r\n      }\r\n      \r\n      if (opts.fullPage) {\r\n        fileName += '_fullpage';\r\n      }\r\n      \r\n      fileName += `_${opts.width || 'auto'}x${opts.height || 'auto'}`;\r\n    }\r\n    \r\n    // Add timestamp if requested\r\n    if (config.timestamp) {\r\n      const timestamp = new Date().toISOString()\r\n        .replace(/[:.]/g, '-')\r\n        .replace('T', '_')\r\n        .substring(0, 19);\r\n      fileName += `_${timestamp}`;\r\n    }\r\n    \r\n    return this._ensureExtension(fileName, opts.format);\r\n  },\r\n\r\n  /**\r\n   * Ensure filename has correct extension\r\n   * @param {string} fileName - Base filename\r\n   * @param {string} format - Image format\r\n   * @returns {string} Filename with extension\r\n   * @private\r\n   */\r\n  _ensureExtension(fileName, format) {\r\n    const extension = format === 'jpeg' ? 'jpg' : format;\r\n    if (!fileName.toLowerCase().endsWith(`.${extension}`)) {\r\n      return `${fileName}.${extension}`;\r\n    }\r\n    return fileName;\r\n  },\r\n\r\n  /**\r\n   * Save screenshot using available methods\r\n   * @param {string} dataUrl - Image data URL\r\n   * @param {string} fileName - File name\r\n   * @param {Object} saveConfig - Save configuration\r\n   * @private\r\n   */\r\n  async _saveScreenshot(dataUrl, fileName, saveConfig) {\r\n    try {\r\n      // Browser download method\r\n      await this._downloadImage(dataUrl, fileName);\r\n      \r\n      // Additional save methods can be added here:\r\n      // - IndexedDB storage for browser persistence\r\n      // - Server-side upload if endpoint is configured\r\n      // - File system API if available and user grants permission\r\n      \r\n      // Server-side save (if endpoint configured)\r\n      if (saveConfig.serverEndpoint) {\r\n        await this._saveToServer(dataUrl, fileName, saveConfig);\r\n      }\r\n      \r\n      // IndexedDB save (for browser persistence)\r\n      if (saveConfig.persistInBrowser) {\r\n        await this._saveToIndexedDB(dataUrl, fileName, saveConfig);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.warn('Failed to save screenshot:', error);\r\n      throw new Error(`Screenshot save failed: ${error.message}`);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save to server endpoint (if configured)\r\n   * @param {string} dataUrl - Image data URL\r\n   * @param {string} fileName - File name\r\n   * @param {Object} saveConfig - Save configuration\r\n   * @private\r\n   */\r\n  async _saveToServer(dataUrl, fileName, saveConfig) {\r\n    if (!saveConfig.serverEndpoint) return;\r\n    \r\n    try {\r\n      const response = await fetch(saveConfig.serverEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          fileName,\r\n          folder: saveConfig.folder,\r\n          dataUrl,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Server save failed: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      console.log(`Screenshot saved to server: ${fileName}`);\r\n    } catch (error) {\r\n      console.error('Server save error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save to IndexedDB for browser persistence\r\n   * @param {string} dataUrl - Image data URL\r\n   * @param {string} fileName - File name\r\n   * @param {Object} saveConfig - Save configuration\r\n   * @private\r\n   */\r\n  async _saveToIndexedDB(dataUrl, fileName, saveConfig) {\r\n    return new Promise((resolve, reject) => {\r\n      const dbName = 'UIBridgeScreenshots';\r\n      const storeName = 'screenshots';\r\n      \r\n      const request = indexedDB.open(dbName, 1);\r\n      \r\n      request.onerror = () => reject(new Error('IndexedDB open failed'));\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        if (!db.objectStoreNames.contains(storeName)) {\r\n          const store = db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });\r\n          store.createIndex('fileName', 'fileName', { unique: false });\r\n          store.createIndex('timestamp', 'timestamp', { unique: false });\r\n        }\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction([storeName], 'readwrite');\r\n        const store = transaction.objectStore(storeName);\r\n        \r\n        const screenshot = {\r\n          fileName,\r\n          folder: saveConfig.folder,\r\n          dataUrl,\r\n          timestamp: new Date().toISOString(),\r\n          size: Math.round(dataUrl.length * 0.75)\r\n        };\r\n        \r\n        const addRequest = store.add(screenshot);\r\n        \r\n        addRequest.onsuccess = () => {\r\n          console.log(`Screenshot saved to IndexedDB: ${fileName}`);\r\n          resolve();\r\n        };\r\n        \r\n        addRequest.onerror = () => {\r\n          reject(new Error('IndexedDB save failed'));\r\n        };\r\n      };\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Ensure html2canvas library is loaded\r\n   * @private\r\n   */\r\n  async _ensureHtml2Canvas() {\r\n    if (window.html2canvas) return;\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js';\r\n      script.integrity = 'sha512-dK1lSuLiS6pQ6nrGT7iQFmQ5xOFCHBcynHgSc1h5tEGE6a86/30XnRrOXKmr5AZ+z3OqQQ4SdMzS0i1h1D5w3g==';\r\n      script.crossOrigin = 'anonymous';\r\n      \r\n      script.onload = () => {\r\n        if (window.html2canvas) {\r\n          resolve();\r\n        } else {\r\n          reject(new Error('html2canvas failed to load properly'));\r\n        }\r\n      };\r\n      \r\n      script.onerror = () => {\r\n        reject(new Error('Failed to load html2canvas library'));\r\n      };\r\n      \r\n      // Check if script is already being loaded\r\n      const existingScript = document.querySelector('script[src*=\"html2canvas\"]');\r\n      if (existingScript) {\r\n        // Wait for existing script to load\r\n        if (window.html2canvas) {\r\n          resolve();\r\n        } else {\r\n          existingScript.onload = resolve;\r\n          existingScript.onerror = reject;\r\n        }\r\n        return;\r\n      }\r\n      \r\n      document.head.appendChild(script);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Hide elements temporarily\r\n   * @param {Array<string>} selectors - CSS selectors to hide\r\n   * @returns {Array} Array of elements that were hidden\r\n   * @private\r\n   */\r\n  _hideElements(selectors) {\r\n    const hiddenElements = [];\r\n    \r\n    for (const selector of selectors) {\r\n      try {\r\n        const elements = document.querySelectorAll(selector);\r\n        for (const element of elements) {\r\n          const originalDisplay = element.style.display;\r\n          element.style.display = 'none';\r\n          hiddenElements.push({ element, originalDisplay });\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Invalid selector for hiding: ${selector}`, error);\r\n      }\r\n    }\r\n    \r\n    return hiddenElements;\r\n  },\r\n\r\n  /**\r\n   * Restore previously hidden elements\r\n   * @param {Array} hiddenElements - Elements to restore\r\n   * @private\r\n   */\r\n  _restoreElements(hiddenElements) {\r\n    for (const { element, originalDisplay } of hiddenElements) {\r\n      element.style.display = originalDisplay;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Download the image\r\n   * @param {string} dataUrl - Image data URL\r\n   * @param {string} fileName - File name\r\n   * @private\r\n   */\r\n  _downloadImage(dataUrl, fileName) {\r\n    try {\r\n      const link = document.createElement('a');\r\n      link.download = fileName;\r\n      link.href = dataUrl;\r\n      \r\n      // Append to body, click, and remove\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n    } catch (error) {\r\n      console.warn('Failed to auto-download screenshot:', error);\r\n    }\r\n  }\r\n}; ", "import { CommandRegistry } from './CommandRegistry.js';\r\nimport { SelectorEngine } from './SelectorEngine.js';\r\nimport { CDIGenerator } from '../discovery/CDIGenerator.js';\r\nimport { clickCommand } from '../commands/click.js';\r\nimport { screenshotCommand } from '../commands/screenshot.js';\r\n\r\n/**\r\n * UIBridge - Main automation framework class\r\n */\r\nexport class UIBridge {\r\n  constructor(config = {}) {\r\n    this.config = {\r\n      debug: false,\r\n      allowedOrigins: ['*'],\r\n      commands: ['click', 'screenshot'],\r\n      generateCDI: true,\r\n      enableHttpDiscovery: false,\r\n      autoInit: true,\r\n      version: '0.1.0',\r\n      \r\n      // Screenshot save configuration\r\n      defaultScreenshotConfig: {\r\n        autoSave: false,\r\n        folder: 'uibridge-screenshots',\r\n        prefix: 'screenshot',\r\n        timestamp: true,\r\n        includeMetadata: false,\r\n        persistInBrowser: false,\r\n        serverEndpoint: null, // Optional server endpoint for saving\r\n        ...config.defaultScreenshotConfig\r\n      },\r\n      \r\n      ...config\r\n    };\r\n    \r\n    this.registry = new CommandRegistry();\r\n    this.selectorEngine = new SelectorEngine();\r\n    this.cdiGenerator = null;\r\n    this._isInitialized = false;\r\n    this._initStartTime = null;\r\n    this._commandHistory = [];\r\n    \r\n    // Auto-initialize if configured\r\n    if (this.config.autoInit && typeof window !== 'undefined') {\r\n      // Delay initialization to ensure DOM is ready\r\n      if (document.readyState === 'loading') {\r\n        document.addEventListener('DOMContentLoaded', () => this.init());\r\n      } else {\r\n        setTimeout(() => this.init(), 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize UIBridge\r\n   * @returns {Promise<void>}\r\n   */\r\n  async init() {\r\n    if (this._isInitialized) {\r\n      this._log('UIBridge already initialized');\r\n      return;\r\n    }\r\n    \r\n    this._initStartTime = performance.now();\r\n    this._log('Initializing UIBridge...', this.config);\r\n    \r\n    try {\r\n      // Register core commands\r\n      await this._registerCoreCommands();\r\n      \r\n      // Setup CDI generator\r\n      this.cdiGenerator = new CDIGenerator(this.registry);\r\n      \r\n      // Setup discovery endpoints\r\n      this._setupDiscovery();\r\n      \r\n      // Expose global APIs\r\n      this._setupGlobalAPI();\r\n      \r\n      this._isInitialized = true;\r\n      const initTime = performance.now() - this._initStartTime;\r\n      \r\n      this._log(`UIBridge initialized successfully in ${initTime.toFixed(2)}ms`, {\r\n        commands: this.registry.getNames(),\r\n        version: this.config.version\r\n      });\r\n      \r\n      // Generate CDI if configured\r\n      if (this.config.generateCDI) {\r\n        this._generateCDI();\r\n      }\r\n      \r\n      // Dispatch initialization event\r\n      this._dispatchEvent('uibridge:initialized', {\r\n        version: this.config.version,\r\n        commands: this.registry.getNames(),\r\n        initTime\r\n      });\r\n      \r\n    } catch (error) {\r\n      this._log('Failed to initialize UIBridge:', error);\r\n      throw new Error(`UIBridge initialization failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   * @param {string} commandName - Name of the command to execute\r\n   * @param {...any} args - Command arguments\r\n   * @returns {Promise<any>} Command result\r\n   */\r\n  async execute(commandName, ...args) {\r\n    if (!this._isInitialized) {\r\n      throw new Error('UIBridge not initialized. Call init() first.');\r\n    }\r\n    \r\n    const command = this.registry.get(commandName);\r\n    if (!command) {\r\n      throw new Error(`Unknown command: ${commandName}. Available commands: ${this.registry.getNames().join(', ')}`);\r\n    }\r\n    \r\n    const startTime = performance.now();\r\n    const executionId = this._generateExecutionId();\r\n    \r\n    this._log(`Executing command: ${commandName}`, { args, executionId });\r\n    \r\n    try {\r\n      // Add to command history\r\n      const historyEntry = {\r\n        id: executionId,\r\n        command: commandName,\r\n        args,\r\n        startTime: new Date().toISOString(),\r\n        status: 'running'\r\n      };\r\n      this._commandHistory.push(historyEntry);\r\n      \r\n      // Execute the command\r\n      const result = await command.execute(this, ...args);\r\n      \r\n      // Update history\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      historyEntry.status = 'completed';\r\n      historyEntry.duration = duration;\r\n      historyEntry.result = result;\r\n      historyEntry.endTime = new Date().toISOString();\r\n      \r\n      this._log(`Command completed: ${commandName} (${duration.toFixed(2)}ms)`, result);\r\n      \r\n      // Dispatch command event\r\n      this._dispatchEvent('uibridge:command', {\r\n        command: commandName,\r\n        args,\r\n        result,\r\n        duration,\r\n        executionId\r\n      });\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      // Update history with error\r\n      const historyEntry = this._commandHistory[this._commandHistory.length - 1];\r\n      if (historyEntry && historyEntry.id === executionId) {\r\n        historyEntry.status = 'failed';\r\n        historyEntry.error = error.message;\r\n        historyEntry.duration = duration;\r\n        historyEntry.endTime = new Date().toISOString();\r\n      }\r\n      \r\n      this._log(`Command failed: ${commandName} (${duration.toFixed(2)}ms)`, error);\r\n      \r\n      // Dispatch error event\r\n      this._dispatchEvent('uibridge:error', {\r\n        command: commandName,\r\n        args,\r\n        error: error.message,\r\n        duration,\r\n        executionId\r\n      });\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find an element using the selector engine\r\n   * @param {string|Object} selector - Selector to find element\r\n   * @returns {Element|null} Found element\r\n   */\r\n  findElement(selector) {\r\n    return this.selectorEngine.find(selector);\r\n  }\r\n\r\n  /**\r\n   * Find multiple elements using the selector engine\r\n   * @param {string|Object} selector - Selector to find elements\r\n   * @returns {Array<Element>} Found elements\r\n   */\r\n  findElements(selector) {\r\n    return this.selectorEngine.findAll(selector);\r\n  }\r\n\r\n  /**\r\n   * Get command discovery information\r\n   * @returns {Array} Array of command information\r\n   */\r\n  discover() {\r\n    return this.registry.getAll().map(cmd => ({\r\n      name: cmd.name,\r\n      description: cmd.description,\r\n      parameters: cmd.parameters,\r\n      examples: cmd.examples || []\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get command execution history\r\n   * @param {number} limit - Maximum number of entries to return\r\n   * @returns {Array} Command history\r\n   */\r\n  getHistory(limit = 50) {\r\n    return this._commandHistory.slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * Clear command history\r\n   */\r\n  clearHistory() {\r\n    this._commandHistory = [];\r\n    this._log('Command history cleared');\r\n  }\r\n\r\n  /**\r\n   * Get UIBridge status and statistics\r\n   * @returns {Object} Status information\r\n   */\r\n  getStatus() {\r\n    return {\r\n      initialized: this._isInitialized,\r\n      version: this.config.version,\r\n      commands: this.registry.getNames(),\r\n      commandCount: this.registry.size(),\r\n      historyLength: this._commandHistory.length,\r\n      config: { ...this.config },\r\n      uptime: this._initStartTime ? performance.now() - this._initStartTime : 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Register a custom command\r\n   * @param {string} name - Command name\r\n   * @param {Object} command - Command implementation\r\n   */\r\n  registerCommand(name, command) {\r\n    this.registry.register(name, command);\r\n    this._log(`Custom command registered: ${name}`);\r\n    \r\n    // Update CDI if available\r\n    if (this.cdiGenerator) {\r\n      this._generateCDI();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unregister a command\r\n   * @param {string} name - Command name\r\n   * @returns {boolean} True if command was removed\r\n   */\r\n  unregisterCommand(name) {\r\n    const removed = this.registry.unregister(name);\r\n    if (removed) {\r\n      this._log(`Command unregistered: ${name}`);\r\n      \r\n      // Update CDI if available\r\n      if (this.cdiGenerator) {\r\n        this._generateCDI();\r\n      }\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Configure default screenshot settings\r\n   * @param {Object} config - Screenshot configuration\r\n   */\r\n  configureScreenshots(config) {\r\n    this.config.defaultScreenshotConfig = {\r\n      ...this.config.defaultScreenshotConfig,\r\n      ...config\r\n    };\r\n    this._log('Screenshot configuration updated:', this.config.defaultScreenshotConfig);\r\n  }\r\n\r\n  /**\r\n   * Get current screenshot configuration\r\n   * @returns {Object} Screenshot configuration\r\n   */\r\n  getScreenshotConfig() {\r\n    return { ...this.config.defaultScreenshotConfig };\r\n  }\r\n\r\n  /**\r\n   * Register core commands\r\n   * @private\r\n   */\r\n  async _registerCoreCommands() {\r\n    const commands = [\r\n      { name: 'click', implementation: clickCommand },\r\n      { name: 'screenshot', implementation: screenshotCommand }\r\n    ];\r\n    \r\n    for (const { name, implementation } of commands) {\r\n      if (this.config.commands.includes(name)) {\r\n        this.registry.register(name, implementation);\r\n        this._log(`Registered core command: ${name}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup discovery endpoints\r\n   * @private\r\n   */\r\n  _setupDiscovery() {\r\n    if (this.config.enableHttpDiscovery) {\r\n      // Simulate HTTP endpoint for development\r\n      window.__uibridge_discovery__ = () => {\r\n        return this.discover();\r\n      };\r\n      \r\n      window.__uibridge_status__ = () => {\r\n        return this.getStatus();\r\n      };\r\n      \r\n      this._log('HTTP discovery endpoints enabled');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup global APIs\r\n   * @private\r\n   */\r\n  _setupGlobalAPI() {\r\n    // Main global API\r\n    window.UIBridge = UIBridge;\r\n    window.uibridge = this;\r\n    \r\n    // Legacy/convenience APIs\r\n    window.__uibridge__ = {\r\n      execute: this.execute.bind(this),\r\n      discover: this.discover.bind(this),\r\n      findElement: this.findElement.bind(this),\r\n      findElements: this.findElements.bind(this),\r\n      getStatus: this.getStatus.bind(this),\r\n      getHistory: this.getHistory.bind(this)\r\n    };\r\n    \r\n    this._log('Global APIs exposed');\r\n  }\r\n\r\n  /**\r\n   * Generate and optionally display CDI\r\n   * @private\r\n   */\r\n  _generateCDI() {\r\n    if (!this.cdiGenerator) return;\r\n    \r\n    try {\r\n      if (this.config.debug) {\r\n        console.log('=== UIBridge Command Discovery Interface ===');\r\n        console.log(this.cdiGenerator.generateMarkdown());\r\n        console.log('=== End CDI ===');\r\n      }\r\n      \r\n      // Expose CDI methods globally for development\r\n      window.__uibridge_cdi__ = {\r\n        markdown: () => this.cdiGenerator.generateMarkdown(),\r\n        json: () => this.cdiGenerator.generateJSON(),\r\n        save: (format) => this.cdiGenerator.saveToFile(format)\r\n      };\r\n      \r\n    } catch (error) {\r\n      this._log('Failed to generate CDI:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique execution ID\r\n   * @returns {string} Execution ID\r\n   * @private\r\n   */\r\n  _generateExecutionId() {\r\n    return `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Dispatch custom event\r\n   * @param {string} eventName - Event name\r\n   * @param {Object} detail - Event details\r\n   * @private\r\n   */\r\n  _dispatchEvent(eventName, detail) {\r\n    if (typeof window !== 'undefined' && window.dispatchEvent) {\r\n      const event = new CustomEvent(eventName, { detail });\r\n      window.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log message with debug configuration\r\n   * @param {...any} args - Arguments to log\r\n   * @private\r\n   */\r\n  _log(...args) {\r\n    if (this.config.debug) {\r\n      console.log('[UIBridge]', ...args);\r\n    }\r\n  }\r\n}\r\n\r\n// Auto-initialize on load if window is available\r\nif (typeof window !== 'undefined' && !window.UIBridge) {\r\n  window.UIBridge = UIBridge;\r\n} "],
  "mappings": "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",
  "names": ["name", "name", "name"]
}
